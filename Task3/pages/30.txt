<!DOCTYPE html>
<html lang="ru" data-vue-meta="%7B%22lang%22:%7B%22ssr%22:%22ru%22%7D%7D">
<head >
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0,viewport-fit=cover,maximum-scale=1,user-scalable=0">
  <meta name="referrer" content="unsafe-url">
  <title>Возможности JavaScript и TypeScript последних лет. Часть 1 / Хабр</title>
  <style>
    /* cyrillic-ext */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveSxf6TF0.woff2) format('woff2');
      unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
    }

    /* cyrillic */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveQhf6TF0.woff2) format('woff2');
      unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
    }

    /* latin-ext */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveSBf6TF0.woff2) format('woff2');
      unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
    }

    /* latin */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveRhf6.woff2) format('woff2');
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }

    /* non-breaking hyphen */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/l/font?kit=KFOlCnqEu92Fr1MmEU9vBh0_IsHAlmrO6g&skey=ee881451c540fdec&v=v29) format('woff2');
      unicode-range: U+02011;
    }
  </style>
  <link rel="preload" href="https://assets.habr.com/habr-web/css/chunk-vendors.b6238726.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/chunk-vendors.76685433.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/css/app.59c6701f.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/app.067cb56a.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/js/7298.c8f1d73c.js" as="script">
  <link rel="stylesheet" href="https://assets.habr.com/habr-web/css/chunk-vendors.b6238726.css"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/app.59c6701f.css">
  <script>window.i18nFetch = new Promise((res, rej) => {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', '/js/i18n/ru-compiled.bb54036e20d5f2f436c26e6c1769b6b8.json');
          xhr.responseType = 'json';
          xhr.onload = function(e) {
            if (this.status === 200) {
              res({ru: xhr.response});
            } else {
              rej(e);
            }
          };
          xhr.send();
        });</script>
  
  <script data-vue-meta="ssr" type="application/ld+json" data-vmid="ldjson-schema">{"@context":"http:\/\/schema.org","@type":"Article","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/habr.com\/ru\/company\/timeweb\/blog\/722450\/"},"headline":"Возможности JavaScript и TypeScript последних лет. Часть 1","datePublished":"2023-03-15T17:01:03+03:00","dateModified":"2023-03-15T18:02:32+03:00","author":{"@type":"Person","name":"Igor Agapov"},"publisher":{"@type":"Organization","name":"Habr","logo":{"@type":"ImageObject","url":"https:\/\/habrastorage.org\/webt\/a_\/lk\/9m\/a_lk9mjkccjox-zccjrpfolmkmq.png"}},"description":"Hello, world! Представляю вашему вниманию перевод первой части этой замечательной статьи, посвященной возможностям JS и TS последних трех лет, которые вы могли...","url":"https:\/\/habr.com\/ru\/company\/timeweb\/blog\/722450\/#post-content-body","about":["c_timeweb","h_webdev","h_javascript","h_typescript","f_develop"],"image":["https:\/\/habr.com\/share\/publication\/722450\/bd425968d37833a029d7c46eb7f7ac37\/","https:\/\/habrastorage.org\/webt\/ma\/po\/lv\/mapolvqq4uunxfqoaviv3g9km9y.jpeg","https:\/\/habrastorage.org\/webt\/mx\/ua\/nb\/mxuanbovcusqgmqdgugvpnql8vq.jpeg"]}</script>
  <script src="//www.googletagservices.com/tag/js/gpt.js" async></script>
  <style>.grecaptcha-badge{visibility: hidden;}</style>
  <meta name="habr-version" content="2.116.0">
  
  <meta data-vue-meta="ssr" property="fb:app_id" content="444736788986613"><meta data-vue-meta="ssr" property="fb:pages" content="472597926099084"><meta data-vue-meta="ssr" name="twitter:card" content="summary_large_image"><meta data-vue-meta="ssr" name="twitter:site" content="@habr_com"><meta data-vue-meta="ssr" property="og:site_name" content="Хабр" data-vmid="og:site_name"><meta data-vue-meta="ssr" property="og:title" content="Возможности JavaScript и TypeScript последних лет. Часть 1" data-vmid="og:title"><meta data-vue-meta="ssr" name="twitter:title" content="Возможности JavaScript и TypeScript последних лет. Часть 1" data-vmid="twitter:title"><meta data-vue-meta="ssr" name="aiturec:title" content="Возможности JavaScript и TypeScript последних лет. Часть 1" data-vmid="aiturec:title"><meta data-vue-meta="ssr" name="description" content="Hello, world! Представляю вашему вниманию перевод первой части этой замечательной статьи , посвященной возможностям JS и TS последних трех лет, которые вы могли пропустить. В первой части мы..." data-vmid="description"><meta data-vue-meta="ssr" itemprop="description" content="Hello, world! Представляю вашему вниманию перевод первой части этой замечательной статьи , посвященной возможностям JS и TS последних трех лет, которые вы могли пропустить. В первой части мы..." data-vmid="description:itemprop"><meta data-vue-meta="ssr" property="og:description" content="Hello, world! Представляю вашему вниманию перевод первой части этой замечательной статьи , посвященной возможностям JS и TS последних трех лет, которые вы могли пропустить. В первой части мы..." data-vmid="og:description"><meta data-vue-meta="ssr" name="twitter:description" content="Hello, world! Представляю вашему вниманию перевод первой части этой замечательной статьи , посвященной возможностям JS и TS последних трех лет, которые вы могли пропустить. В первой части мы..." data-vmid="twitter:description"><meta data-vue-meta="ssr" property="aiturec:description" content="Hello, world! Представляю вашему вниманию перевод первой части этой замечательной статьи , посвященной возможностям JS и TS последних трех лет, которые вы могли пропустить. В первой части мы..." data-vmid="aiturec:description"><meta data-vue-meta="ssr" itemprop="image" content="https://habrastorage.org/webt/ma/po/lv/mapolvqq4uunxfqoaviv3g9km9y.jpeg" data-vmid="image:itemprop"><meta data-vue-meta="ssr" property="og:image" content="https://habrastorage.org/webt/ma/po/lv/mapolvqq4uunxfqoaviv3g9km9y.jpeg" data-vmid="og:image"><meta data-vue-meta="ssr" property="og:image:width" content="1200" data-vmid="og:image:width"><meta data-vue-meta="ssr" property="og:image:height" content="630" data-vmid="og:image:height"><meta data-vue-meta="ssr" property="aiturec:image" content="https://habrastorage.org/webt/ma/po/lv/mapolvqq4uunxfqoaviv3g9km9y.jpeg" data-vmid="aiturec:image"><meta data-vue-meta="ssr" name="twitter:image" content="https://habrastorage.org/webt/ma/po/lv/mapolvqq4uunxfqoaviv3g9km9y.jpeg" data-vmid="twitter:image"><meta data-vue-meta="ssr" property="vk:image" content="https://habrastorage.org/webt/ma/po/lv/mapolvqq4uunxfqoaviv3g9km9y.jpeg?format=vk" data-vmid="vk:image"><meta data-vue-meta="ssr" property="aiturec:item_id" content="722450" data-vmid="aiturec:item_id"><meta data-vue-meta="ssr" property="aiturec:datetime" content="2023-03-15T14:01:03.000Z" data-vmid="aiturec:datetime"><meta data-vue-meta="ssr" content="https://habr.com/ru/company/timeweb/blog/722450/" property="og:url" data-vmid="og:url"><meta data-vue-meta="ssr" property="og:type" content="article" data-vmid="og:type"><meta data-vue-meta="ssr" property="og:locale" content="ru_RU" data-vmid="og:locale"><meta data-vue-meta="ssr" name="keywords" content="timeweb_статьи_перевод, javascript, typescript, ts, feature, возможность">
  <link data-vue-meta="ssr" href="https://habr.com/ru/rss/post/722450/?fl=ru" type="application/rss+xml" title="" rel="alternate" name="rss"><link data-vue-meta="ssr" href="https://habr.com/ru/company/timeweb/blog/722450/" rel="canonical" data-vmid="canonical"><link data-vue-meta="ssr" rel="image_src" href="https://habrastorage.org/webt/ma/po/lv/mapolvqq4uunxfqoaviv3g9km9y.jpeg" data-vmid="image:href">
  <meta name="apple-mobile-web-app-status-bar-style" content="#303b44">
  <meta name="msapplication-TileColor" content="#629FBC">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="mobile-web-app-capable" content="yes">
  <link
    rel="shortcut icon"
    type="image/png"
    sizes="16x16"
    href="https://assets.habr.com/habr-web/img/favicons/favicon-16.png"
  >
  <link
    rel="shortcut icon"
    type="image/png"
    sizes="32x32"
    href="https://assets.habr.com/habr-web/img/favicons/favicon-32.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="76x76"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-76.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="120x120"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="152x152"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-152.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="180x180"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-180.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="256x256"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-256.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1136x640.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2436x1125.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1792x828.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_828x1792.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1334x750.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2668.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2208x1242.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1125x2436.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2208.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2732x2048.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2688x1242.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2224x1668.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_750x1334.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2048x2732.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2388x1668.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2224.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_640x1136.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2388.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2048x1536.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1536x2048.png"
  >
  <link
    rel="mask-icon"
    color="#77a2b6"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.svg"
  >
  <link
    crossorigin="use-credentials"
    href="/manifest.webmanifest"
    rel="manifest"
  >
  <script async src="https://unpkg.com/pwacompat" crossorigin="anonymous"></script>
  <script>window.yaContextCb = window.yaContextCb || []</script>
  <script src="https://yandex.ru/ads/system/context.js" async></script>
</head>
<body>


<div id="app" data-server-rendered="true" data-async-called="true"><div class="tm-layout__wrapper"><!----> <div></div> <div class="tm-feature tm-feature"><!----></div> <header class="tm-header"><div class="tm-page-width"><div class="tm-header__container"><div class="tm-header__burger-nav"><button type="button" class="tm-header__button tm-header__button_burger"><svg height="16" width="16" class="tm-svg-img tm-header__icon tm-header__icon-burger"><title>Меню</title> <use xlink:href="/img/megazord-v28.617e16ca..svg#header-burger"></use></svg></button></div> <span class="tm-header__logo-wrap"><a href="/ru/" class="tm-header__logo tm-header__logo_ru"><svg height="16" width="16" class="tm-svg-img tm-header__icon"><title>Хабр</title> <use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a> <span class="tm-header__beta-sign" style="display:none;">β</span></span> <!----> <div class="tm-header-user-menu tm-header_user-menu"><a href="/ru/search/" class="tm-header-user-menu__item tm-header-user-menu__search"><svg height="24" width="24" class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search"><title>Поиск</title> <use xlink:href="/img/megazord-v28.617e16ca..svg#search"></use></svg></a> <!----> <!----> <!----> <div class="tm-header-user-menu__item"><button data-test-id="menu-toggle-guest" class="tm-header-user-menu__toggle"><svg height="24" width="24" class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_white"><title>Профиль</title> <use xlink:href="/img/megazord-v28.617e16ca..svg#header-user"></use></svg></button> <!----></div> <!----></div></div></div></header> <div class="tm-layout"><div class="tm-page-progress-bar"></div> <!----> <!----> <div class="tm-page-width"></div> <main class="tm-layout__container"><div hl="ru" companyName="timeweb" data-async-called="true" class="tm-page"><div class="tm-page-width"><div class="tm-page__header"><!----></div> <div class="tm-page__wrapper"><div class="tm-page__main tm-page__main_has-sidebar"><div class="pull-down"><!----> <div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg height="24" width="24" class="tm-svg-img pull-down__arrow"><title>Обновить</title> <use xlink:href="/img/megazord-v28.617e16ca..svg#pull-arrow"></use></svg></div></div> <div class="tm-article-presenter"> <div class="tm-article-presenter__body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><div class="tm-article-presenter__header"> <div class="tm-article-snippet tm-article-presenter__snippet tm-article-snippet"><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a href="/ru/users/aio350/" title="aio350" class="tm-user-info__userpic"><div class="tm-entity-image"><img alt="" height="32" src="//habrastorage.org/r/w48/getpro/habr/avatars/7c5/004/ce5/7c5004ce547cc07d757577b60cde5214.jpg" width="32" class="tm-entity-image__pic"></div></a> <span class="tm-user-info__user"><a href="/ru/users/aio350/" class="tm-user-info__username">
      aio350
      <!----></a> <span class="tm-article-datetime-published"><time datetime="2023-03-15T14:01:03.000Z" title="2023-03-15, 17:01">4 часа назад</time></span></span></span></div> <!----></div> <h1 lang="ru" class="tm-article-snippet__title tm-article-snippet__title_h1"><span>Возможности JavaScript и TypeScript последних лет. Часть 1</span></h1> <div class="tm-article-snippet__stats"><div class="tm-article-complexity tm-article-complexity_complexity-medium"><span class="tm-svg-icon__wrapper tm-article-complexity__icon"><svg height="24" width="24" class="tm-svg-img tm-svg-icon"><title>Уровень сложности</title> <use xlink:href="/img/megazord-v28.617e16ca..svg#complexity-medium"></use></svg></span> <span class="tm-article-complexity__label">
    Средний
  </span></div> <div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg height="24" width="24" class="tm-svg-img tm-svg-icon"><title>Время на прочтение</title> <use xlink:href="/img/megazord-v28.617e16ca..svg#clock"></use></svg></span> <span class="tm-article-reading-time__label">
    13 мин
  </span></div> <span class="tm-icon-counter tm-data-icons__item"><svg height="24" width="24" class="tm-svg-img tm-icon-counter__icon"><title>Количество просмотров</title> <use xlink:href="/img/megazord-v28.617e16ca..svg#counter-views"></use></svg> <span class="tm-icon-counter__value">1.2K</span></span></div> <div class="tm-article-snippet__hubs-container"><div class="tm-article-snippet__hubs"><span class="tm-article-snippet__hubs-item"><a href="/ru/company/timeweb/blog/" class="tm-article-snippet__hubs-item-link router-link-active"><span>Блог компании Timeweb Cloud</span> <!----></a></span><span class="tm-article-snippet__hubs-item"><a href="/ru/hub/webdev/" class="tm-article-snippet__hubs-item-link"><span>Разработка веб-сайтов</span> <span title="Профильный хаб" class="tm-article-snippet__profiled-hub">*</span></a></span><span class="tm-article-snippet__hubs-item"><a href="/ru/hub/javascript/" class="tm-article-snippet__hubs-item-link"><span>JavaScript</span> <span title="Профильный хаб" class="tm-article-snippet__profiled-hub">*</span></a></span><span class="tm-article-snippet__hubs-item"><a href="/ru/hub/typescript/" class="tm-article-snippet__hubs-item-link"><span>TypeScript</span> <span title="Профильный хаб" class="tm-article-snippet__profiled-hub">*</span></a></span></div></div> <div class="tm-article-snippet__labels-container"><div class="tm-article-snippet__labels"><div class="tm-article-snippet__label tm-article-snippet__label_variant-review"><span>
          Обзор
        </span></div> <div class="tm-article-snippet__label tm-article-snippet__label tm-article-snippet__label_variant-translation"><span>
          Перевод
        </span></div></div></div> <!----> <!----></div></div> <div class="tm-article-presenter__origin"><a href="https://betterprogramming.pub/all-javascript-and-typescript-features-of-the-last-3-years-629c57e73e42" target="_blank" class="tm-article-presenter__origin-link">
                Автор оригинала:
                <span>
                  Linus Schlumberger
                </span></a></div> <div data-gallery-root="" lang="ru" class="tm-article-body"><div></div> <div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-1"><div xmlns="http://www.w3.org/1999/xhtml"><img src="https://habrastorage.org/r/w780q1/webt/ma/po/lv/mapolvqq4uunxfqoaviv3g9km9y.jpeg" data-src="https://habrastorage.org/webt/ma/po/lv/mapolvqq4uunxfqoaviv3g9km9y.jpeg" data-blurred="true"/><br/>
<p><br/>
Hello, world!</p><br/>
<p>Представляю вашему вниманию перевод первой части <a href="https://betterprogramming.pub/all-javascript-and-typescript-features-of-the-last-3-years-629c57e73e42">этой замечательной статьи</a>, посвященной возможностям JS и TS последних трех лет, которые вы могли пропустить.</p><br/>
<p>В первой части мы поговорим о возможностях JS, во второй — о возможностях TS.</p><br/>
<p>Это первая часть.</p><br/>
<p><em>Обратите внимание</em>: название почти каждой возможности — это также ссылка на соответствующий раздел MDN.</p><a name="habracut"></a><br/>
<h2 id="ecmascript">ECMAScript</h2><br/>
<h3 id="do-es2020-vozmozhnosti-o-kotoryh-mnogie-ne-znayut">До ES2020 (возможности, о которых многие не знают)</h3><br/>
<p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates">Теггированые шаблонные литералы / Tagged template literals</a></strong>: если после названия функции указать шаблонный литерал, то функция получит части шаблонных литералов и значения шаблона, например:</p><br/>
<pre><code class="javascript">// Предположим, что мы хотим форматировать число, содержащееся в строке
function formatNumbers(strings: TemplateStringsArray, number: number): string {
  return strings[0] + number.toFixed(2) + strings[1];
}
console.log(formatNumbers`This is the value: ${0}, it's important.`);
// This is the value: 0.00, it's important.

// Или мы хотим "переводить" (в данном случае в нижний регистр) ключи переводов, содержащиеся в строке
function translateKey(key: string): string {
  return key.toLocaleLowerCase();
}
function translate(strings: TemplateStringsArray, ...expressions: string[]): string {
  return strings.reduce((accumulator, currentValue, index) => accumulator + currentValue + translateKey(expressions[index] ?? ''), '');
}
console.log(translate`Hello, this is ${'NAME'} to say ${'MESSAGE'}.`);
// Hello, this is name to say message.</code></pre><br/>
<p>__<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Символы / Symbols</a>__: примитивы, представляющие собой гарантировано уникальные значения (<code>Symbol("foo") === Symbol("foo"); // false</code>), которые часто используются в качестве ключей объектов во избежание коллизий с другими ключами, например:</p><br/>
<pre><code class="javascript">const obj: { [index: string]: string } = {};

const symbolA = Symbol('a');
const symbolB = Symbol.for('b');

console.log(symbolA.description); // "a"

obj[symbolA] = 'a';
obj[symbolB] = 'b';
obj['c'] = 'c';
obj.d = 'd';

console.log(obj[symbolA]); // "a"
console.log(obj[symbolB]); // "b"
// Ключ не может быть другим символов или быть не символом
console.log(obj[Symbol('a')]); // undefined
console.log(obj['a']); // undefined

// Ключи-символы не "перечисляются" (enumerated) при использовании `for/in`.
for (const i in obj) {
  console.log(i); // "c", "d"
}</code></pre><br/>
<h3 id="es2020">ES2020</h3><br/>
<p>__<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining">Оператор опциональной последовательности / Optional chaining</a> (<code>?.</code>)__: обычно используется для безопасного доступа к свойству потенциально несуществующего/неопределенного (<code>undefined</code>) объекта, но также может использоваться для безопасного доступа по индексу к элементу потенциально несуществующего массива и вызова потенциально несуществующей функции, например:</p><br/>
<pre><code class="javascript">// Раньше:
// Если у нас был потенциально несуществующий объект,
// мы не могли легко получить доступ к его свойству
const object: { name: string } | undefined = Math.random() > 0.5 ? undefined : { name: 'test' };
const value = object.name; // TypeError: 'object' is possibly 'undefined'

// Мы должны были проверять "определенность" объекта
// Это ухудшало читаемость кода и становилось сложным в случае вложенных объектов
const objectOld: { name: string } | undefined = Math.random() > 0.5 ? undefined : { name: 'test' };
const valueOld = objectOld ? objectOld.name : undefined;

// Сейчас:
// Мы можем использовать оператор опциональной последовательности
// для безопасного доступа к свойству потенциально несуществующего объекта
const objectNew: { name: string } | undefined = Math.random() > 0.5 ? undefined : { name: 'test' };
const valueNew = objectNew?.name;

// Его также можно использовать для безопасного доступа по индексу и вызова функции
const array: string[] | undefined = Math.random() > 0.5 ? undefined : ['test'];
const item = array?.[0];
const func: (() => string) | undefined = Math.random() > 0.5 ? undefined : () => 'test';
const result = func?.();</code></pre><br/>
<p>__<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing">Оператор нулевого слияния / Nullish coalescing operator</a> (<code>??</code>)__: является альтернативой оператора <code>||</code>. Отличие между этими операторами состоит в том, что <code>||</code> применяется ко всем ложным значениям, а <code>??</code> — только к <code>undefined</code> и <code>null</code>, например:</p><br/>
<pre><code class="javascript">const value: string | undefined = Math.random() > 0.5 ? undefined : 'test';

// Раньше:
// Для условного присвоения значения переменной мы использовали оператор `||`
const anotherValue = value || 'hello';
console.log(anotherValue); // "test" или "hello"

// Это не всегда работало хорошо
const incorrectValue = '' || 'incorrect';
console.log(incorrectValue); // всегда "incorrect"
const anotherIncorrectValue = 0 || 'incorrect';
console.log(anotherIncorrectValue); // всегда "incorrect"

// Сейчас:
// Оператор нулевого слияния применяется только в отношении `undefined` и `null`
const newValue = value ?? 'hello';
console.log(newValue) // "test" или "hello"

// Ложные значения не заменяются
const correctValue = '' ?? 'incorrect';
console.log(correctValue); // всегда ""
const anotherCorrectValue = 0 ?? 'incorrect';
console.log(anotherCorrectValue); // всегда 0</code></pre><br/>
<p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import"><code>import()</code></a></strong>: функциональное выражение динамического импорта — как <code>import ... from '...'</code>, но во время выполнения кода и с возможностью использования переменных:</p><br/>
<pre><code class="javascript">let importModule;
if (shouldImport) {
  importModule = await import('./module.mjs');
}</code></pre><br/>
<p>__<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll"><code>String.matchAll()</code></a>__: возвращает несколько совпадений регулярного выражения, включая группы захвата (capture groups), без использования циклов:</p><br/>
<pre><code class="javascript">const stringVar = 'testhello,testagain,';

// Раньше:
// Получаем совпадения, но без групп захвата
console.log(stringVar.match(/test([\w]+?),/g));
// ["testhello,", "testagain,"]

// Получаем одно совпадение с группой захвата
const singleMatch = stringVar.match(/test([\w]+?),/);
if (singleMatch) {
  console.log(singleMatch[0]); // "testhello,"
  console.log(singleMatch[1]); // "hello"
}

// Получаем все совпадения с группами захвата (метод `exec` запоминает индекс последнего совпадения)
// `execMatch` должен быть определен за пределами цикла (для сохранения состояния) и быть глобальным (флаг `g`),
// иначе цикл будет бесконечным
const regex = /test([\w]+?),/g;
let execMatch;
while ((execMatch = regex.exec(stringVar)) !== null) {
  console.log(execMatch[0]); // "testhello,", "testagain,"
  console.log(execMatch[1]); // "hello", "again"
}

// Сейчас:
// Регулярное выражение должно быть глобальным
const matchesIterator = stringVar.matchAll(/test([\w]+?),/g);
// Итерация или преобразование в массив (Array.from()), доступ по индексу запрещен
for (const match of matchesIterator) {
  console.log(match[0]); // "testhello,", "testagain,"
  console.log(match[1]); // "hello", "again"
}</code></pre><br/>
<p>__<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled"><code>Promise.allSettled()</code></a>__: похож на <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all"><code>Promise.all()</code></a>, но ожидает (любого) разрешения всех промисов, а не возвращает первую ошибку, что облегчает обработку ошибок:</p><br/>
<pre><code class="javascript">async function success1() { return 'a' };
async function success2() { return 'b' };
async function fail1() { throw 'fail 1' };
async function fail2() { throw 'fail 2' };

// Раньше:
console.log(await Promise.all([success1(), success2()])); // ["a", "b"]
// но:
try {
  await Promise.all([success1(), success2(), fail1(), fail2()]);
} catch (e) {
  console.log(e); // "fail 1"
}
// Мы перехватываем одну ошибку и не имеем доступа к "успешным" значениям

// Фикс (плохой код):
console.log(await Promise.all([ // ["a", "b", undefined, undefined]
  success1().catch(e => { console.log(e); }),
  success2().catch(e => { console.log(e); }),
  fail1().catch(e => { console.log(e); }), // "fail 1"
  fail2().catch(e => { console.log(e); })])); // "fail 2"

// Сейчас:
const results = await Promise.allSettled([success1(), success2(), fail1(), fail2()]);
const successfulResults = results
  .filter(result => result.status === 'fulfilled')
  .map(result => (result as PromiseFulfilledResult&lt;string>).value);
console.log(successfulResults); // ["a", "b"]
results.filter(result => result.status === 'rejected').forEach(error => {
  console.log((error as PromiseRejectedResult).reason); // "fail 1", "fail 2"
});
// или:
for (const result of results) {
  if (result.status === 'fulfilled') {
    console.log(result.value); // "a", "b"
  } else if (result.status === 'rejected') {
    console.log(result.reason); // "fail 1", "fail 2"
  }
}</code></pre><br/>
<p>__<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"><code>BigInt</code></a>__: тип данных, позволяющий хранить (с сохранением точности) и оперировать большими (целыми) числами. Для создания значения такого типа используется либо конструктор <code>BigInt</code>, либо символ <code>n</code> в конце числа:</p><br/>
<pre><code class="javascript">// Раньше:
// JS хранит числа как числа с плавающей запятой, что всегда влечет небольшую потерю точности,
// которая существенно возрастает после определенного числа
const maxSafeInteger = 9007199254740991;
console.log(maxSafeInteger === Number.MAX_SAFE_INTEGER); // true

// БОльшие числа сравниваются некорректно
console.log(Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2); // true

// Сейчас:
// Тип данных `BigInt` теоретически позволяет хранить и оперировать неопределенно большими (целыми) числами
const maxSafeIntegerPreviously = 9007199254740991n;
console.log(maxSafeIntegerPreviously); // 9007199254740991

const anotherWay = BigInt(9007199254740991);
console.log(anotherWay); // 9007199254740991

// Обратите внимание: в конструктор нельзя передавать числа, которые больше чем MAX_SAFE_INTEGER
const incorrect = BigInt(9007199254740992);
console.log(incorrect); // 9007199254740992
const incorrectAgain = BigInt(9007199254740993);
console.log(incorrectAgain); // 9007199254740992

// Но можно передавать строки или использовать другой синтаксис
const correct = BigInt('9007199254740993');
console.log(correct); // 9007199254740993
const correctAgain = 9007199254740993n;
console.log(correctAgain); // 9007199254740993

// Другие форматы также могут передаваться в виде строк
const hex = BigInt('0x1fffffffffffff');
console.log(hex); // 9007199254740991
const octal = BigInt('0o377777777777777777');
console.log(octal); // 9007199254740991
const binary = BigInt('0b11111111111111111111111111111111111111111111111111111');
console.log(binary); // 9007199254740991

// Большинство арифметических операций работает, как ожидается,
// если другой операнд также является `BigInt`
// Все операции возвращают `BigInt`
const addition = maxSafeIntegerPreviously + 2n;
console.log(addition); // 9007199254740993

const multiplication = maxSafeIntegerPreviously * 2n;
console.log(multiplication); // 18014398509481982

const subtraction = multiplication - 10n;
console.log(subtraction); // 18014398509481972

const modulo = multiplication % 10n;
console.log(modulo); // 2

const exponentiation = 2n ** 54n;
console.log(exponentiation); // 18014398509481984

const exponentiationAgain = 2n^54n;
console.log(exponentiationAgain); // 18014398509481984

const negative = exponentiation * -1n;
console.log(negative); // -18014398509481984

// Деление работает немного иначе, поскольку `BigInt` может хранить только целые числа
const division = multiplication / 2n;
console.log(division); // 9007199254740991
// Для целых чисел, которые делятся без остатка, это работает хорошо

// Иначе результат округляется до целого числа в меньшую сторону
const divisionAgain = 5n / 2n;
console.log(divisionAgain); // 2

// Проверка на равенство с обычными числами является нестрогой
console.log(0n === 0); // false
console.log(0n == 0); // true

// Сравнение работает как ожидается
console.log(1n &lt; 2); // true
console.log(2n > 1); // true
console.log(2 > 2); // false
console.log(2n > 2); // false
console.log(2n >= 2); // true

// Тип
console.log(typeof 1n); // "bigint"</code></pre><br/>
<p>__<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis"><code>globalThis</code></a>__: предоставляет доступ к глобальным переменным, независимо от среды выполнения кода (браузер, Node.js и др.):</p><br/>
<pre><code class="javascript">console.log(globalThis.Math); // объект `Math`</code></pre><br/>
<p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta">import.meta</a></strong>: в числе прочего, при использовании модулей ES, предоставляет доступ к URL текущего модуля:</p><br/>
<pre><code class="javascript">console.log(import.meta.url); // "file://..."</code></pre><br/>
<p><strong>export * as… from '...'</strong>: позволяет с легкостью повторно экспортировать (re-export) дефолтные экспорты в качестве субмодулей:</p><br/>
<pre><code class="javascript">export * as am from 'another-module'

import { am } from 'module'</code></pre><br/>
<h3 id="es2021">ES2021</h3><br/>
<p>__<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll">String.replaceAll()</a>__: заменяет все вхождения подстроки в строке, является альтернативой регулярного выражения с флагом <code>g</code>:</p><br/>
<pre><code class="javascript">const testString = 'hello/greetings everyone/everybody';
// Раньше:
// Заменяет только первое вхождение
console.log(testString.replace('/', '|'));
// 'hello|greetings everyone/everybody'

// Заменяет все вхождения
// Регулярное выражение + экранирование + глобальный флаг
console.log(testString.replace(/\//g, '|'));
// 'hello|greetings everyone|everybody'

// Сейчас:
// Заменяет все вхождения
// Чище и быстрее
console.log(testString.replaceAll('/', '|'));
// 'hello|greetings everyone|everybody'</code></pre><br/>
<p>__<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any">Promise.any()</a>__: возвращается первое "успешное" значение. Отклоняется только при отклонении всех промисов (в этом случае возвращается <code>AggregateError</code>), в отличие от <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race"><code>Promise.race()</code></a>, который отклоняется при отклонении любого промиса:</p><br/>
<pre><code class="javascript">async function success1() { return 'a' };
async function success2() { return 'b' };
async function fail1() { throw 'fail 1' };
async function fail2() { throw 'fail 2' };

// Раньше:
console.log(await Promise.race([success1(), success2()])); // "a"
// но:
try {
  await Promise.race([fail1(), fail2(), success1(), success2()]);
} catch (e) {
  console.log(e); // "fail 1"
}
// Перехватываем одну ошибку и не имеем доступа к "успешным" значениям

// Фикс (плохой код):
console.log(await Promise.race([ // "a"
  fail1().catch(e => { console.log(e); }), // "fail 1"
  fail2().catch(e => { console.log(e); }), // "fail 2"
  success1().catch(e => { console.log(e); }),
  success2().catch(e => { console.log(e); })]));

// Сейчас:
console.log(await Promise.any([fail1(), fail2(), success1(), success2()])); // "a"
try {
  await Promise.any([fail1(), fail2()]);
} catch (e) {
  console.log(e); // [AggregateError]
  console.log(e.errors); // ["fail 1", "fail 2"]
}</code></pre><br/>
<p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment">Оператор присваивания нулевого слияния / Nullish coalescing assignment</a> (<code>??=</code>)</strong>: присваивает новое значение переменной только в том случае, когда текущим значением переменной является <code>null</code> или <code>undefined</code>:</p><br/>
<pre><code class="javascript">let x1 = undefined;
let x2 = 'a';
const getNewValue = () => 'b';

x1 ??= 'b';
console.log(x1) // "b"

// Обратите внимание: `getNewValue()` не выполняется
x2 ??= getNewValue();
console.log(x1) // "a"</code></pre><br/>
<p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment">Оператор присваивания логического И / Logical and assignment</a> (<code>&amp;&amp;=</code>)</strong>: присваивает новое значение переменной только в том случае, когда текущим значением переменной является истинное значение:</p><br/>
<pre><code class="javascript">let x1 = undefined;
let x2 = 'a';
const getNewValue = () => 'b';

x1 &amp;&amp;= getNewValue();
console.log(x1) // undefined

x2 &amp;&amp;= 'b';
console.log(x1) // "b"</code></pre><br/>
<p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment">Оператор присваивания логического ИЛИ / Logical or assignment</a> (<code>||=</code>)</strong>: присваивает новое значение переменной только в том случае, когда текущим значением переменной является ложное значение:</p><br/>
<pre><code class="javascript">let x1 = undefined;
let x2 = 'a';
const getNewValue = () => 'b';

x1 ||= 'b';
console.log(x1) // "b"

x2 ||= getNewValue();
console.log(x1) // "a"</code></pre><br/>
<p>__<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef"><code>WeakRef</code></a>__: содержит "слабую" ссылку на объект. Слабая ссылка не препятствует уничтожению объекта сборщиком мусора:</p><br/>
<pre><code class="javascript">const ref = new WeakRef(element);

// Получаем значение, если объект/элемент существует и не был уничтожен сборщиком мусора
const value = ref.deref;
console.log(value); // undefined
// Похоже, объекта больше нет</code></pre><br/>
<p>_<em>Разделители числовых литералов / Numeric literal separators (`</em>`)__: позволяет разделять числа для повышения читаемости, не влияет на функционал:</p><br/>
<pre><code class="javascript">const int = 1_000_000_000;
const float = 1_000_000_000.999_999_999;
const max = 9_223_372_036_854_775_807n;
const binary = 0b1011_0101_0101;
const octal = 0o1234_5670;
const hex = 0xD0_E0_F0;</code></pre><br/>
<h3 id="es2022">ES2022</h3><br/>
<p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await"><code>await</code> верхнего уровня / Top level await</a></strong>: позволяет использовать ключевое слово <code>await</code> на верхнем уровне модулей, что избавляет от необходимости оборачивать асинхронный код в асинхронную функцию и улучшает обработку ошибок:</p><br/>
<pre><code class="javascript">async function asyncFuncSuccess() {
  return 'test';
}
async function asyncFuncFail() {
  throw new Error('Test');
}

// Раньше:
// Ждать разрешения промиса можно было только внутри асинхронной функции
// await asyncFuncSuccess(); // SyntaxError: await is only valid in async functions
// Обертка приводит к усложнению обработки ошибок и потере контроля за порядком выполнения кода
try {
  (async () => {
    console.log(await asyncFuncSuccess()); // "test"
    try {
      await asyncFuncFail();
    } catch (e) {
      // Иначе ошибки не будут перехвачены (или будут перехвачены слишком поздно с усложненной трассировкой стека)
      console.error(e); // Error: "Test"
      throw e;
    }
  })();
} catch (e) {
  // Не выполняется или выполняется слишком поздно
  console.error(e);
}
// Выводится до разрешения промиса
console.log('Hey'); // "Hey"

// Сейчас:
// Файл должен быть модулем (`"type"" "module"` в `package.json` или расширение ".mjs")
console.log(await asyncFuncSuccess()); // "test"
try {
  await asyncFuncFail();
} catch (e) {
  console.error(e); // Error: "Test"
}
// Выводится после разрешения промиса
console.log('Hello'); // "Hello"</code></pre><br/>
<p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields"><code>#private</code></a></strong>: делает членов класса (свойства и методы) приватными (закрытыми). Такие члены доступны только внутри класса, в котором они определены. Они не могут удаляться или определяться динамически. Любое некорректное поведение завершается синтаксической ошибкой JS. В TS-проектах для обозначения приватных членов класса используется ключевое слово <code>private</code>.</p><br/>
<pre><code class="javascript">class ClassWithPrivateField {
  #privateField;
  #anotherPrivateField = 4;

  constructor() {
    this.#privateField = 42; // Ok
    this.#privateField; // SyntaxError
    this.#undeclaredField = 444; // SyntaxError
    console.log(this.#anotherPrivateField); // 4
  }
}

const instance = new ClassWithPrivateField();
instance.#privateField === 42; // SyntaxError</code></pre><br/>
<p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static">Статические члены класса / Static class members</a></strong>: делает поле класса (свойство или метод) статическим:</p><br/>
<pre><code class="javascript">class Logger {
  static id = 'Logger1';
  static type = 'GenericLogger';
  static log(message: string | Error) {
    console.log(message);
  }
}

class ErrorLogger extends Logger {
  static type = 'ErrorLogger';
  static qualifiedType;
  static log(e: Error) {
    return super.log(e.toString());
  }
}

console.log(Logger.type); // "GenericLogger"
Logger.log('Test'); // "Test"

// Инстанцирование класса, содержащего только статические поля, бесполезно и
// выполняется здесь только в целях демонстрации
const log = new Logger();

ErrorLogger.log(new Error('Test')); // Error: "Test" (инстанцирование суперкласса не меняет поведение подклассов)
console.log(ErrorLogger.type); // "ErrorLogger"
console.log(ErrorLogger.qualifiedType); // undefined
console.log(ErrorLogger.id); // "Logger1"

// Выбрасывается исключение, поскольку `log` - статический метод, а не метод экземпляра
console.log(log.log()); // log.log is not a function</code></pre><br/>
<p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks">Статические блоки инициализации / Static initialization blocks</a></strong>: блок кода, который выполняется при инициализации класса. Как правило, такие блоки используются в качестве "конструкторов" статических членов классов:</p><br/>
<pre><code class="javascript">class Test {
  static staticProperty1 = 'Property 1';
  static staticProperty2;
  static {
    this.staticProperty2 = 'Property 2';
  }
}

console.log(Test.staticProperty1); // "Property 1"
console.log(Test.staticProperty2); // "Property 2"</code></pre><br/>
<p><strong>Утверждение импорта / Import assertion (пока доступно только в V8)</strong>: определяет тип импортируемого ресурса. Может использоваться, например, для импорта JSON без необходимости его разбора:</p><br/>
<pre><code class="javascript">import json from './foo.json' assert { type: 'json' };
console.log(json.answer); // 42</code></pre><br/>
<p><strong>Индексы совпадений регулярного выражения / RegExp match indices</strong>: начальный и конечный индексы совпадения регулярного выражения с группами захвата. Это работает с <code>RegExp.exec()</code>, <code>RegExp.match()</code> и <code>String.matchAll()</code>:</p><br/>
<pre><code class="javascript">const matchObj = /(test+)(hello+)/d.exec('start-testesthello-stop');

// Раньше:
console.log(matchObj?.index); // 9 - только начальный индекс совпадения

// Сейчас:
if (matchObj) {
  // Начальный и конечный индексы совпадения
  console.log(matchObj.indices[0]); // [9, 18]

  // Начальный и конечный индексы групп захвата
  console.log(matchObj.indices[1]); // [9, 13]
  console.log(matchObj.indices[2]); // [13, 18]
}</code></pre><br/>
<p>__<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at">Негативная индексация / Negative indexing</a>__: метод <code>Array.at</code> возвращает элементы массива с конца (с помощью отрицательных индексов). <code>at(-1)</code> является эквивалентом <code>arr[arr.length - 1]</code> для получения последнего элемента, но не для его установки:</p><br/>
<pre><code class="javascript">console.log([4, 5].at(-1)) // 5

const array = [4, 5];
array.at(-1) = 3; // SyntaxError</code></pre><br/>
<p>__<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn"><code>Object.hasOwn()</code></a>__: альтернатива метода <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty"><code>Object.hasOwnProperty()</code></a>, позволяющая определять наличие в объекте указанного свойства. Работает лучше в некоторых крайних случаях:</p><br/>
<pre><code class="javascript">const obj = { name: 'test' };

console.log(Object.hasOwn(obj, 'name')); // true
console.log(Object.hasOwn(obj, 'gender')); // false</code></pre><br/>
<p>__<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause">Причина ошибки / Error cause</a>__: при повторном выбросе исключения (re-throwing) в качестве второго аргумента в конструктор <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error"><code>Error</code></a> можно передать объект со свойством <code>cause</code>, значением которого является оригинальное исключение:</p><br/>
<pre><code class="javascript">try {
  try {
    connectToDatabase();
  } catch (err) {
    throw new Error('Не удалось подключиться к базе данных.', { cause: err });
  }
} catch (err) {
  console.log(err.cause); // ReferenceError: connectToDatabase is not defined
}</code></pre><br/>
<p>На этом перевод первой части, посвященной возможностям JS, завершен. В следующей части мы поговорим о возможностях TS.</p><br/>
<p>Надеюсь, вы узнали что-то новое и не зря потратили время.</p><br/>
<p>Happy coding!</p><br/>
<hr/><br/>
<p><a href="https://timeweb.cloud/vds-vps?utm_source=habr&amp;utm_medium=banner&amp;utm_campaign"><img src="https://habrastorage.org/r/w780q1/webt/mx/ua/nb/mxuanbovcusqgmqdgugvpnql8vq.jpeg" data-src="https://habrastorage.org/webt/mx/ua/nb/mxuanbovcusqgmqdgugvpnql8vq.jpeg" data-blurred="true"/></a></p></div></div></div> <!----> <!----></div> <!----> <!----></div> <!----> <div class="tm-article-presenter__meta"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span> <ul class="tm-separated-list__list"><li class="tm-separated-list__item"><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5Btimeweb_%D1%81%D1%82%D0%B0%D1%82%D1%8C%D0%B8_%D0%BF%D0%B5%D1%80%D0%B5%D0%B2%D0%BE%D0%B4%5D" class="tm-tags-list__link">timeweb_статьи_перевод</a></li><li class="tm-separated-list__item"><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5Bjavascript%5D" class="tm-tags-list__link">javascript</a></li><li class="tm-separated-list__item"><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5Btypescript%5D" class="tm-tags-list__link">typescript</a></li><li class="tm-separated-list__item"><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5Bts%5D" class="tm-tags-list__link">ts</a></li><li class="tm-separated-list__item"><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5Bfeature%5D" class="tm-tags-list__link">feature</a></li><li class="tm-separated-list__item"><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D1%8C%5D" class="tm-tags-list__link">возможность</a></li></ul></div> <div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span> <ul class="tm-separated-list__list"><li class="tm-separated-list__item"><a href="/ru/company/timeweb/blog/" class="tm-hubs-list__link router-link-active">Блог компании Timeweb Cloud</a></li><li class="tm-separated-list__item"><a href="/ru/hub/webdev/" class="tm-hubs-list__link">Разработка веб-сайтов</a></li><li class="tm-separated-list__item"><a href="/ru/hub/javascript/" class="tm-hubs-list__link">JavaScript</a></li><li class="tm-separated-list__item"><a href="/ru/hub/typescript/" class="tm-hubs-list__link">TypeScript</a></li></ul></div></div></article></div> <!----></div> <div class="tm-article-sticky-panel"><div class="tm-data-icons tm-article-sticky-panel__icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg height="24" width="24" class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article"><title>Всего голосов 12: ↑12 и ↓0</title> <use xlink:href="/img/megazord-v28.617e16ca..svg#counter-rating"></use></svg> <span title="Всего голосов 12: ↑12 и ↓0" class="tm-votes-meter__value tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating">+12</span></div> <DIV class="v-portal" style="display:none;"></DIV></div> <!----> <!----> <button title="Добавить в закладки" type="button" class="bookmarks-button tm-data-icons__item"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg height="24" width="24" class="tm-svg-img tm-svg-icon"><title>Добавить в закладки</title> <use xlink:href="/img/megazord-v28.617e16ca..svg#counter-favorite"></use></svg></span> <span title="Количество пользователей, добавивших публикацию в закладки" class="bookmarks-button__counter">
    34
  </span></button> <div title="Поделиться" class="tm-sharing tm-data-icons__item"><button type="button" class="tm-sharing__button"><svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="tm-sharing__icon"><path fill="currentColor" d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z"></path></svg></button> <DIV class="v-portal" style="display:none;"></DIV></div> <div title="Читать комментарии" class="tm-article-comments-counter-link tm-data-icons__item"><a href="/ru/company/timeweb/blog/722450/comments/" class="tm-article-comments-counter-link__link"><svg height="24" width="24" class="tm-svg-img tm-article-comments-counter-link__icon"><title>Комментарии</title> <use xlink:href="/img/megazord-v28.617e16ca..svg#counter-comments"></use></svg> <span class="tm-article-comments-counter-link__value">
      1
    </span></a> <!----></div> <!----> <DIV class="v-portal" style="display:none;"></DIV></div></div></div>  <div class="tm-article-presenter__footer"><div class="tm-article-blocks"><!----> <div></div> <section class="tm-block tm-block tm-block_spacing-bottom"><!----> <div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><div class="tm-article-author"><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a href="/ru/company/timeweb/profile/" class="tm-company-snippet__logo-link"><div class="tm-entity-image"><img alt="" height="40" src="//habrastorage.org/getpro/habr/company/fc0/4f0/3f7/fc04f03f7188eca615ef971283d62dc5.png" width="40" class="tm-entity-image__pic"></div></a> <div class="tm-company-snippet__info"><a href="/ru/company/timeweb/profile/" class="tm-company-snippet__title">Timeweb Cloud</a> <div class="tm-company-snippet__description">Облачная платформа для разработчиков и бизнеса</div></div></div> <div class="tm-article-author__buttons"><!----> <!----></div></div> <!----> <div class="tm-article-author__separator"></div></div> <div class="tm-user-card tm-article-author__user-card tm-user-card tm-user-card_variant-article"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a href="/ru/users/aio350/" class="tm-user-card__userpic tm-user-card__userpic_size-40"><div class="tm-entity-image"><img alt="" src="//habrastorage.org/getpro/habr/avatars/7c5/004/ce5/7c5004ce547cc07d757577b60cde5214.jpg" class="tm-entity-image__pic"></div></a> <div class="tm-user-card__meta"><div title=" 277 голосов " class="tm-counter-container tm-karma tm-karma"><div class="tm-counter-container__header"><div class="tm-karma__votes tm-karma__votes_positive">
      167
    </div></div> <div class="tm-counter-container__footer"><div class="tm-karma__text">
      Карма
    </div> <DIV class="v-portal" style="display:none;"></DIV></div></div> <div title="Рейтинг пользователя" class="tm-counter-container"><div class="tm-counter-container__header"> <div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!----> <div class="tm-votes-lever__score tm-votes-lever__score tm-votes-lever__score_appearance-rating"><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter tm-votes-lever__score-counter_rating">
        72.7
      </span></div> <!----></div></div> <div class="tm-counter-container__footer"><span class="tm-rating__text tm-rating__text">
      Рейтинг
    </span></div></div></div></div></div> <div class="tm-user-card__info tm-user-card__info tm-user-card__info_variant-article"><div class="tm-user-card__title tm-user-card__title tm-user-card__title_variant-article"><span class="tm-user-card__name tm-user-card__name tm-user-card__name_variant-article">Igor Agapov</span> <a href="/ru/users/aio350/" class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article">
          @aio350
        </a> <!----></div> <p class="tm-user-card__short-info tm-user-card__short-info tm-user-card__short-info_variant-article">JavaScript Developer</p></div></div> <div class="tm-user-card__buttons tm-user-card__buttons tm-user-card__buttons_variant-article"><!----> <!----> <!----> <!----> <!----></div></div> <!----></div> <DIV class="v-portal" style="display:none;"></DIV></div> <!----></section> <!----> <div class="tm-article-blocks__comments"><div class="tm-article-page-comments"><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a href="/ru/company/timeweb/blog/722450/comments/" class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style"><svg height="24" width="24" class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted"><title>Комментарии</title> <use xlink:href="/img/megazord-v28.617e16ca..svg#counter-comments"></use></svg> <span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted">
       Комментарии 1 
    </span></a> <!----></div></div></div>  <section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2> </div> <!----></header> <div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><div class="tm-tabs tm-tabs"><div><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim">
        Лучшие за сутки
      </button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link tm-tabs__tab-link_slim">
        Похожие
      </button></span></div> <!----></div> <div class="similar-and-daily__tab-view"><div><!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <div class="tm-placeholder-article-cards"><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div> <div class="tm-placeholder__user-date loads"></div></div> <div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div> <div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div> <div class="tm-placeholder-article-card__icons tm-placeholder__counters"><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div> <div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div></div></div></div> <!----> <!----> <!----> <!----></div> <!----></div></div> <!----></section> <div><!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <!----> <div class="tm-placeholder-inset tm-placeholder-vacancies"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div> <div class="tm-placeholder-inset__body"><ul class="tm-placeholder-list"><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div> <div class="tm-project-block-items__properties"><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width: 100px;"></span></span></div></li></ul></div> <div class="tm-placeholder-inset__footer"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div> <!----> <!----> <!----> <!----> <!----> <!----></div> <!----> </div></div></div></div></div> <div class="tm-page__sidebar"><!----></div></div></div></div></main> <!----></div> <!----> <div class="tm-footer"><div class="tm-page-width"><div class="tm-footer__container"><div class="tm-footer__title"><a href="/ru/" class="tm-svg-icon__wrapper tm-footer__title-link router-link-active"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>Хабр</title> <use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a></div> <div class="tm-footer__social"><a href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>Facebook</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>Twitter</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>VK</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-vkontakte"></use></svg></a><a href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>Telegram</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>Youtube</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a href="https://zen.yandex.ru/habr" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>Яндекс Дзен</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-zen"></use></svg></a></div> <DIV class="v-portal" style="display:none;"></DIV> <button class="tm-footer__link"><svg height="16" width="16" class="tm-svg-img tm-footer__icon"><title>Язык</title> <use xlink:href="/img/megazord-v28.617e16ca..svg#lang"></use></svg>
        Настройка языка
      </button> <a href="/ru/feedback/" class="tm-footer__link">
        Техническая поддержка
      </a> <a href="/berserk-mode-nope" class="tm-footer__link">
        Вернуться на старую версию
      </a> <div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2023, </span> <span class="tm-copyright__name"><a href="https://company.habr.com/" rel="noopener" target="_blank" class="tm-copyright__link">Habr</a></span></span></div></div></div></div> <!----> <!----></div> <div class="vue-portal-target"></div></div>
<script>window.__INITIAL_STATE__={"adblock":{"hasAcceptableAdsFilter":false,"hasAdblock":false},"articlesList":{"articlesList":{"722450":{"id":"722450","timePublished":"2023-03-15T14:01:03+00:00","isCorporative":true,"lang":"ru","titleHtml":"Возможности JavaScript и TypeScript последних лет. Часть 1","leadData":{"textHtml":"\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fma\u002Fpo\u002Flv\u002Fmapolvqq4uunxfqoaviv3g9km9y.jpeg\"\u003E\u003Cbr\u003E\r\n\u003Cp\u003E\u003Cbr\u003E\r\nHello, world!\u003C\u002Fp\u003E\u003Cbr\u003E\r\n\u003Cp\u003EПредставляю вашему вниманию перевод первой части \u003Ca href=\"https:\u002F\u002Fbetterprogramming.pub\u002Fall-javascript-and-typescript-features-of-the-last-3-years-629c57e73e42\" rel=\"nofollow noopener noreferrer\"\u003Eэтой замечательной статьи\u003C\u002Fa\u003E, посвященной возможностям JS и TS последних трех лет, которые вы могли пропустить.\u003C\u002Fp\u003E\u003Cbr\u003E\r\n\u003Cp\u003EВ первой части мы поговорим о возможностях JS, во второй — о возможностях TS.\u003C\u002Fp\u003E\u003Cbr\u003E\r\n\u003Cp\u003EЭто первая часть.\u003C\u002Fp\u003E\u003Cbr\u003E\r\n\u003Cp\u003E\u003Cem\u003EОбратите внимание\u003C\u002Fem\u003E: название почти каждой возможности — это также ссылка на соответствующий раздел MDN.\u003C\u002Fp\u003E","imageUrl":null,"buttonTextHtml":"Читать дальше &rarr;","image":null},"editorVersion":"1.0","postType":"article","postLabels":[{"type":"translation","data":{"originalAuthorName":"Linus Schlumberger","originalUrl":"https:\u002F\u002Fbetterprogramming.pub\u002Fall-javascript-and-typescript-features-of-the-last-3-years-629c57e73e42"}}],"author":{"id":"2147423","alias":"aio350","fullname":"Igor Agapov","avatarUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Favatars\u002F7c5\u002F004\u002Fce5\u002F7c5004ce547cc07d757577b60cde5214.jpg","speciality":"JavaScript Developer","scoreStats":{"score":167,"votesCount":277},"rating":72.7,"relatedData":null,"contacts":[],"authorContacts":[],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null}},"statistics":{"commentsCount":1,"favoritesCount":34,"readingCount":1178,"score":12,"votesCount":12,"votesCountPlus":12,"votesCountMinus":0},"hubs":[{"id":"17357","alias":"timeweb","type":"corporative","title":"Блог компании Timeweb Cloud","titleHtml":"Блог компании Timeweb Cloud","isProfiled":false,"relatedData":null},{"id":"91","alias":"webdev","type":"collective","title":"Разработка веб-сайтов","titleHtml":"Разработка веб-сайтов","isProfiled":true,"relatedData":null},{"id":"357","alias":"javascript","type":"collective","title":"JavaScript","titleHtml":"JavaScript","isProfiled":true,"relatedData":null},{"id":"21370","alias":"typescript","type":"collective","title":"TypeScript","titleHtml":"TypeScript","isProfiled":true,"relatedData":null}],"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка"}],"relatedData":null,"textHtml":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fwebt\u002Fma\u002Fpo\u002Flv\u002Fmapolvqq4uunxfqoaviv3g9km9y.jpeg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fma\u002Fpo\u002Flv\u002Fmapolvqq4uunxfqoaviv3g9km9y.jpeg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cbr\u002F\u003E\r\nHello, world!\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EПредставляю вашему вниманию перевод первой части \u003Ca href=\"https:\u002F\u002Fbetterprogramming.pub\u002Fall-javascript-and-typescript-features-of-the-last-3-years-629c57e73e42\"\u003Eэтой замечательной статьи\u003C\u002Fa\u003E, посвященной возможностям JS и TS последних трех лет, которые вы могли пропустить.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EВ первой части мы поговорим о возможностях JS, во второй — о возможностях TS.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EЭто первая часть.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cem\u003EОбратите внимание\u003C\u002Fem\u003E: название почти каждой возможности — это также ссылка на соответствующий раздел MDN.\u003C\u002Fp\u003E\u003Ca name=\"habracut\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\r\n\u003Ch2 id=\"ecmascript\"\u003EECMAScript\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\r\n\u003Ch3 id=\"do-es2020-vozmozhnosti-o-kotoryh-mnogie-ne-znayut\"\u003EДо ES2020 (возможности, о которых многие не знают)\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cstrong\u003E\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FTemplate_literals#tagged_templates\"\u003EТеггированые шаблонные литералы \u002F Tagged template literals\u003C\u002Fa\u003E\u003C\u002Fstrong\u003E: если после названия функции указать шаблонный литерал, то функция получит части шаблонных литералов и значения шаблона, например:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003E\u002F\u002F Предположим, что мы хотим форматировать число, содержащееся в строке\nfunction formatNumbers(strings: TemplateStringsArray, number: number): string {\n  return strings[0] + number.toFixed(2) + strings[1];\n}\nconsole.log(formatNumbers`This is the value: ${0}, it's important.`);\n\u002F\u002F This is the value: 0.00, it's important.\n\n\u002F\u002F Или мы хотим \"переводить\" (в данном случае в нижний регистр) ключи переводов, содержащиеся в строке\nfunction translateKey(key: string): string {\n  return key.toLocaleLowerCase();\n}\nfunction translate(strings: TemplateStringsArray, ...expressions: string[]): string {\n  return strings.reduce((accumulator, currentValue, index) =\u003E accumulator + currentValue + translateKey(expressions[index] ?? ''), '');\n}\nconsole.log(translate`Hello, this is ${'NAME'} to say ${'MESSAGE'}.`);\n\u002F\u002F Hello, this is name to say message.\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E__\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FSymbol\"\u003EСимволы \u002F Symbols\u003C\u002Fa\u003E__: примитивы, представляющие собой гарантировано уникальные значения (\u003Ccode\u003ESymbol(\"foo\") === Symbol(\"foo\"); \u002F\u002F false\u003C\u002Fcode\u003E), которые часто используются в качестве ключей объектов во избежание коллизий с другими ключами, например:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Econst obj: { [index: string]: string } = {};\n\nconst symbolA = Symbol('a');\nconst symbolB = Symbol.for('b');\n\nconsole.log(symbolA.description); \u002F\u002F \"a\"\n\nobj[symbolA] = 'a';\nobj[symbolB] = 'b';\nobj['c'] = 'c';\nobj.d = 'd';\n\nconsole.log(obj[symbolA]); \u002F\u002F \"a\"\nconsole.log(obj[symbolB]); \u002F\u002F \"b\"\n\u002F\u002F Ключ не может быть другим символов или быть не символом\nconsole.log(obj[Symbol('a')]); \u002F\u002F undefined\nconsole.log(obj['a']); \u002F\u002F undefined\n\n\u002F\u002F Ключи-символы не \"перечисляются\" (enumerated) при использовании `for\u002Fin`.\nfor (const i in obj) {\n  console.log(i); \u002F\u002F \"c\", \"d\"\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Ch3 id=\"es2020\"\u003EES2020\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E__\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FOperators\u002FOptional_chaining\"\u003EОператор опциональной последовательности \u002F Optional chaining\u003C\u002Fa\u003E (\u003Ccode\u003E?.\u003C\u002Fcode\u003E)__: обычно используется для безопасного доступа к свойству потенциально несуществующего\u002Fнеопределенного (\u003Ccode\u003Eundefined\u003C\u002Fcode\u003E) объекта, но также может использоваться для безопасного доступа по индексу к элементу потенциально несуществующего массива и вызова потенциально несуществующей функции, например:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003E\u002F\u002F Раньше:\n\u002F\u002F Если у нас был потенциально несуществующий объект,\n\u002F\u002F мы не могли легко получить доступ к его свойству\nconst object: { name: string } | undefined = Math.random() \u003E 0.5 ? undefined : { name: 'test' };\nconst value = object.name; \u002F\u002F TypeError: 'object' is possibly 'undefined'\n\n\u002F\u002F Мы должны были проверять \"определенность\" объекта\n\u002F\u002F Это ухудшало читаемость кода и становилось сложным в случае вложенных объектов\nconst objectOld: { name: string } | undefined = Math.random() \u003E 0.5 ? undefined : { name: 'test' };\nconst valueOld = objectOld ? objectOld.name : undefined;\n\n\u002F\u002F Сейчас:\n\u002F\u002F Мы можем использовать оператор опциональной последовательности\n\u002F\u002F для безопасного доступа к свойству потенциально несуществующего объекта\nconst objectNew: { name: string } | undefined = Math.random() \u003E 0.5 ? undefined : { name: 'test' };\nconst valueNew = objectNew?.name;\n\n\u002F\u002F Его также можно использовать для безопасного доступа по индексу и вызова функции\nconst array: string[] | undefined = Math.random() \u003E 0.5 ? undefined : ['test'];\nconst item = array?.[0];\nconst func: (() =\u003E string) | undefined = Math.random() \u003E 0.5 ? undefined : () =\u003E 'test';\nconst result = func?.();\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E__\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FOperators\u002FNullish_coalescing\"\u003EОператор нулевого слияния \u002F Nullish coalescing operator\u003C\u002Fa\u003E (\u003Ccode\u003E??\u003C\u002Fcode\u003E)__: является альтернативой оператора \u003Ccode\u003E||\u003C\u002Fcode\u003E. Отличие между этими операторами состоит в том, что \u003Ccode\u003E||\u003C\u002Fcode\u003E применяется ко всем ложным значениям, а \u003Ccode\u003E??\u003C\u002Fcode\u003E — только к \u003Ccode\u003Eundefined\u003C\u002Fcode\u003E и \u003Ccode\u003Enull\u003C\u002Fcode\u003E, например:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Econst value: string | undefined = Math.random() \u003E 0.5 ? undefined : 'test';\n\n\u002F\u002F Раньше:\n\u002F\u002F Для условного присвоения значения переменной мы использовали оператор `||`\nconst anotherValue = value || 'hello';\nconsole.log(anotherValue); \u002F\u002F \"test\" или \"hello\"\n\n\u002F\u002F Это не всегда работало хорошо\nconst incorrectValue = '' || 'incorrect';\nconsole.log(incorrectValue); \u002F\u002F всегда \"incorrect\"\nconst anotherIncorrectValue = 0 || 'incorrect';\nconsole.log(anotherIncorrectValue); \u002F\u002F всегда \"incorrect\"\n\n\u002F\u002F Сейчас:\n\u002F\u002F Оператор нулевого слияния применяется только в отношении `undefined` и `null`\nconst newValue = value ?? 'hello';\nconsole.log(newValue) \u002F\u002F \"test\" или \"hello\"\n\n\u002F\u002F Ложные значения не заменяются\nconst correctValue = '' ?? 'incorrect';\nconsole.log(correctValue); \u002F\u002F всегда \"\"\nconst anotherCorrectValue = 0 ?? 'incorrect';\nconsole.log(anotherCorrectValue); \u002F\u002F всегда 0\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cstrong\u003E\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FOperators\u002Fimport\"\u003E\u003Ccode\u003Eimport()\u003C\u002Fcode\u003E\u003C\u002Fa\u003E\u003C\u002Fstrong\u003E: функциональное выражение динамического импорта — как \u003Ccode\u003Eimport ... from '...'\u003C\u002Fcode\u003E, но во время выполнения кода и с возможностью использования переменных:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Elet importModule;\nif (shouldImport) {\n  importModule = await import('.\u002Fmodule.mjs');\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E__\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FString\u002FmatchAll\"\u003E\u003Ccode\u003EString.matchAll()\u003C\u002Fcode\u003E\u003C\u002Fa\u003E__: возвращает несколько совпадений регулярного выражения, включая группы захвата (capture groups), без использования циклов:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Econst stringVar = 'testhello,testagain,';\n\n\u002F\u002F Раньше:\n\u002F\u002F Получаем совпадения, но без групп захвата\nconsole.log(stringVar.match(\u002Ftest([\\w]+?),\u002Fg));\n\u002F\u002F [\"testhello,\", \"testagain,\"]\n\n\u002F\u002F Получаем одно совпадение с группой захвата\nconst singleMatch = stringVar.match(\u002Ftest([\\w]+?),\u002F);\nif (singleMatch) {\n  console.log(singleMatch[0]); \u002F\u002F \"testhello,\"\n  console.log(singleMatch[1]); \u002F\u002F \"hello\"\n}\n\n\u002F\u002F Получаем все совпадения с группами захвата (метод `exec` запоминает индекс последнего совпадения)\n\u002F\u002F `execMatch` должен быть определен за пределами цикла (для сохранения состояния) и быть глобальным (флаг `g`),\n\u002F\u002F иначе цикл будет бесконечным\nconst regex = \u002Ftest([\\w]+?),\u002Fg;\nlet execMatch;\nwhile ((execMatch = regex.exec(stringVar)) !== null) {\n  console.log(execMatch[0]); \u002F\u002F \"testhello,\", \"testagain,\"\n  console.log(execMatch[1]); \u002F\u002F \"hello\", \"again\"\n}\n\n\u002F\u002F Сейчас:\n\u002F\u002F Регулярное выражение должно быть глобальным\nconst matchesIterator = stringVar.matchAll(\u002Ftest([\\w]+?),\u002Fg);\n\u002F\u002F Итерация или преобразование в массив (Array.from()), доступ по индексу запрещен\nfor (const match of matchesIterator) {\n  console.log(match[0]); \u002F\u002F \"testhello,\", \"testagain,\"\n  console.log(match[1]); \u002F\u002F \"hello\", \"again\"\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E__\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FPromise\u002FallSettled\"\u003E\u003Ccode\u003EPromise.allSettled()\u003C\u002Fcode\u003E\u003C\u002Fa\u003E__: похож на \u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FPromise\u002Fall\"\u003E\u003Ccode\u003EPromise.all()\u003C\u002Fcode\u003E\u003C\u002Fa\u003E, но ожидает (любого) разрешения всех промисов, а не возвращает первую ошибку, что облегчает обработку ошибок:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Easync function success1() { return 'a' };\nasync function success2() { return 'b' };\nasync function fail1() { throw 'fail 1' };\nasync function fail2() { throw 'fail 2' };\n\n\u002F\u002F Раньше:\nconsole.log(await Promise.all([success1(), success2()])); \u002F\u002F [\"a\", \"b\"]\n\u002F\u002F но:\ntry {\n  await Promise.all([success1(), success2(), fail1(), fail2()]);\n} catch (e) {\n  console.log(e); \u002F\u002F \"fail 1\"\n}\n\u002F\u002F Мы перехватываем одну ошибку и не имеем доступа к \"успешным\" значениям\n\n\u002F\u002F Фикс (плохой код):\nconsole.log(await Promise.all([ \u002F\u002F [\"a\", \"b\", undefined, undefined]\n  success1().catch(e =\u003E { console.log(e); }),\n  success2().catch(e =\u003E { console.log(e); }),\n  fail1().catch(e =\u003E { console.log(e); }), \u002F\u002F \"fail 1\"\n  fail2().catch(e =\u003E { console.log(e); })])); \u002F\u002F \"fail 2\"\n\n\u002F\u002F Сейчас:\nconst results = await Promise.allSettled([success1(), success2(), fail1(), fail2()]);\nconst successfulResults = results\n  .filter(result =\u003E result.status === 'fulfilled')\n  .map(result =\u003E (result as PromiseFulfilledResult&lt;string\u003E).value);\nconsole.log(successfulResults); \u002F\u002F [\"a\", \"b\"]\nresults.filter(result =\u003E result.status === 'rejected').forEach(error =\u003E {\n  console.log((error as PromiseRejectedResult).reason); \u002F\u002F \"fail 1\", \"fail 2\"\n});\n\u002F\u002F или:\nfor (const result of results) {\n  if (result.status === 'fulfilled') {\n    console.log(result.value); \u002F\u002F \"a\", \"b\"\n  } else if (result.status === 'rejected') {\n    console.log(result.reason); \u002F\u002F \"fail 1\", \"fail 2\"\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E__\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FBigInt\"\u003E\u003Ccode\u003EBigInt\u003C\u002Fcode\u003E\u003C\u002Fa\u003E__: тип данных, позволяющий хранить (с сохранением точности) и оперировать большими (целыми) числами. Для создания значения такого типа используется либо конструктор \u003Ccode\u003EBigInt\u003C\u002Fcode\u003E, либо символ \u003Ccode\u003En\u003C\u002Fcode\u003E в конце числа:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003E\u002F\u002F Раньше:\n\u002F\u002F JS хранит числа как числа с плавающей запятой, что всегда влечет небольшую потерю точности,\n\u002F\u002F которая существенно возрастает после определенного числа\nconst maxSafeInteger = 9007199254740991;\nconsole.log(maxSafeInteger === Number.MAX_SAFE_INTEGER); \u002F\u002F true\n\n\u002F\u002F БОльшие числа сравниваются некорректно\nconsole.log(Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2); \u002F\u002F true\n\n\u002F\u002F Сейчас:\n\u002F\u002F Тип данных `BigInt` теоретически позволяет хранить и оперировать неопределенно большими (целыми) числами\nconst maxSafeIntegerPreviously = 9007199254740991n;\nconsole.log(maxSafeIntegerPreviously); \u002F\u002F 9007199254740991\n\nconst anotherWay = BigInt(9007199254740991);\nconsole.log(anotherWay); \u002F\u002F 9007199254740991\n\n\u002F\u002F Обратите внимание: в конструктор нельзя передавать числа, которые больше чем MAX_SAFE_INTEGER\nconst incorrect = BigInt(9007199254740992);\nconsole.log(incorrect); \u002F\u002F 9007199254740992\nconst incorrectAgain = BigInt(9007199254740993);\nconsole.log(incorrectAgain); \u002F\u002F 9007199254740992\n\n\u002F\u002F Но можно передавать строки или использовать другой синтаксис\nconst correct = BigInt('9007199254740993');\nconsole.log(correct); \u002F\u002F 9007199254740993\nconst correctAgain = 9007199254740993n;\nconsole.log(correctAgain); \u002F\u002F 9007199254740993\n\n\u002F\u002F Другие форматы также могут передаваться в виде строк\nconst hex = BigInt('0x1fffffffffffff');\nconsole.log(hex); \u002F\u002F 9007199254740991\nconst octal = BigInt('0o377777777777777777');\nconsole.log(octal); \u002F\u002F 9007199254740991\nconst binary = BigInt('0b11111111111111111111111111111111111111111111111111111');\nconsole.log(binary); \u002F\u002F 9007199254740991\n\n\u002F\u002F Большинство арифметических операций работает, как ожидается,\n\u002F\u002F если другой операнд также является `BigInt`\n\u002F\u002F Все операции возвращают `BigInt`\nconst addition = maxSafeIntegerPreviously + 2n;\nconsole.log(addition); \u002F\u002F 9007199254740993\n\nconst multiplication = maxSafeIntegerPreviously * 2n;\nconsole.log(multiplication); \u002F\u002F 18014398509481982\n\nconst subtraction = multiplication - 10n;\nconsole.log(subtraction); \u002F\u002F 18014398509481972\n\nconst modulo = multiplication % 10n;\nconsole.log(modulo); \u002F\u002F 2\n\nconst exponentiation = 2n ** 54n;\nconsole.log(exponentiation); \u002F\u002F 18014398509481984\n\nconst exponentiationAgain = 2n^54n;\nconsole.log(exponentiationAgain); \u002F\u002F 18014398509481984\n\nconst negative = exponentiation * -1n;\nconsole.log(negative); \u002F\u002F -18014398509481984\n\n\u002F\u002F Деление работает немного иначе, поскольку `BigInt` может хранить только целые числа\nconst division = multiplication \u002F 2n;\nconsole.log(division); \u002F\u002F 9007199254740991\n\u002F\u002F Для целых чисел, которые делятся без остатка, это работает хорошо\n\n\u002F\u002F Иначе результат округляется до целого числа в меньшую сторону\nconst divisionAgain = 5n \u002F 2n;\nconsole.log(divisionAgain); \u002F\u002F 2\n\n\u002F\u002F Проверка на равенство с обычными числами является нестрогой\nconsole.log(0n === 0); \u002F\u002F false\nconsole.log(0n == 0); \u002F\u002F true\n\n\u002F\u002F Сравнение работает как ожидается\nconsole.log(1n &lt; 2); \u002F\u002F true\nconsole.log(2n \u003E 1); \u002F\u002F true\nconsole.log(2 \u003E 2); \u002F\u002F false\nconsole.log(2n \u003E 2); \u002F\u002F false\nconsole.log(2n \u003E= 2); \u002F\u002F true\n\n\u002F\u002F Тип\nconsole.log(typeof 1n); \u002F\u002F \"bigint\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E__\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FglobalThis\"\u003E\u003Ccode\u003EglobalThis\u003C\u002Fcode\u003E\u003C\u002Fa\u003E__: предоставляет доступ к глобальным переменным, независимо от среды выполнения кода (браузер, Node.js и др.):\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Econsole.log(globalThis.Math); \u002F\u002F объект `Math`\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cstrong\u003E\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FOperators\u002Fimport.meta\"\u003Eimport.meta\u003C\u002Fa\u003E\u003C\u002Fstrong\u003E: в числе прочего, при использовании модулей ES, предоставляет доступ к URL текущего модуля:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Econsole.log(import.meta.url); \u002F\u002F \"file:\u002F\u002F...\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cstrong\u003Eexport * as… from '...'\u003C\u002Fstrong\u003E: позволяет с легкостью повторно экспортировать (re-export) дефолтные экспорты в качестве субмодулей:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Eexport * as am from 'another-module'\n\nimport { am } from 'module'\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Ch3 id=\"es2021\"\u003EES2021\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E__\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FString\u002FreplaceAll\"\u003EString.replaceAll()\u003C\u002Fa\u003E__: заменяет все вхождения подстроки в строке, является альтернативой регулярного выражения с флагом \u003Ccode\u003Eg\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Econst testString = 'hello\u002Fgreetings everyone\u002Feverybody';\n\u002F\u002F Раньше:\n\u002F\u002F Заменяет только первое вхождение\nconsole.log(testString.replace('\u002F', '|'));\n\u002F\u002F 'hello|greetings everyone\u002Feverybody'\n\n\u002F\u002F Заменяет все вхождения\n\u002F\u002F Регулярное выражение + экранирование + глобальный флаг\nconsole.log(testString.replace(\u002F\\\u002F\u002Fg, '|'));\n\u002F\u002F 'hello|greetings everyone|everybody'\n\n\u002F\u002F Сейчас:\n\u002F\u002F Заменяет все вхождения\n\u002F\u002F Чище и быстрее\nconsole.log(testString.replaceAll('\u002F', '|'));\n\u002F\u002F 'hello|greetings everyone|everybody'\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E__\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FPromise\u002Fany\"\u003EPromise.any()\u003C\u002Fa\u003E__: возвращается первое \"успешное\" значение. Отклоняется только при отклонении всех промисов (в этом случае возвращается \u003Ccode\u003EAggregateError\u003C\u002Fcode\u003E), в отличие от \u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FPromise\u002Frace\"\u003E\u003Ccode\u003EPromise.race()\u003C\u002Fcode\u003E\u003C\u002Fa\u003E, который отклоняется при отклонении любого промиса:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Easync function success1() { return 'a' };\nasync function success2() { return 'b' };\nasync function fail1() { throw 'fail 1' };\nasync function fail2() { throw 'fail 2' };\n\n\u002F\u002F Раньше:\nconsole.log(await Promise.race([success1(), success2()])); \u002F\u002F \"a\"\n\u002F\u002F но:\ntry {\n  await Promise.race([fail1(), fail2(), success1(), success2()]);\n} catch (e) {\n  console.log(e); \u002F\u002F \"fail 1\"\n}\n\u002F\u002F Перехватываем одну ошибку и не имеем доступа к \"успешным\" значениям\n\n\u002F\u002F Фикс (плохой код):\nconsole.log(await Promise.race([ \u002F\u002F \"a\"\n  fail1().catch(e =\u003E { console.log(e); }), \u002F\u002F \"fail 1\"\n  fail2().catch(e =\u003E { console.log(e); }), \u002F\u002F \"fail 2\"\n  success1().catch(e =\u003E { console.log(e); }),\n  success2().catch(e =\u003E { console.log(e); })]));\n\n\u002F\u002F Сейчас:\nconsole.log(await Promise.any([fail1(), fail2(), success1(), success2()])); \u002F\u002F \"a\"\ntry {\n  await Promise.any([fail1(), fail2()]);\n} catch (e) {\n  console.log(e); \u002F\u002F [AggregateError]\n  console.log(e.errors); \u002F\u002F [\"fail 1\", \"fail 2\"]\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cstrong\u003E\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FOperators\u002FNullish_coalescing_assignment\"\u003EОператор присваивания нулевого слияния \u002F Nullish coalescing assignment\u003C\u002Fa\u003E (\u003Ccode\u003E??=\u003C\u002Fcode\u003E)\u003C\u002Fstrong\u003E: присваивает новое значение переменной только в том случае, когда текущим значением переменной является \u003Ccode\u003Enull\u003C\u002Fcode\u003E или \u003Ccode\u003Eundefined\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Elet x1 = undefined;\nlet x2 = 'a';\nconst getNewValue = () =\u003E 'b';\n\nx1 ??= 'b';\nconsole.log(x1) \u002F\u002F \"b\"\n\n\u002F\u002F Обратите внимание: `getNewValue()` не выполняется\nx2 ??= getNewValue();\nconsole.log(x1) \u002F\u002F \"a\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cstrong\u003E\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FOperators\u002FLogical_AND_assignment\"\u003EОператор присваивания логического И \u002F Logical and assignment\u003C\u002Fa\u003E (\u003Ccode\u003E&amp;&amp;=\u003C\u002Fcode\u003E)\u003C\u002Fstrong\u003E: присваивает новое значение переменной только в том случае, когда текущим значением переменной является истинное значение:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Elet x1 = undefined;\nlet x2 = 'a';\nconst getNewValue = () =\u003E 'b';\n\nx1 &amp;&amp;= getNewValue();\nconsole.log(x1) \u002F\u002F undefined\n\nx2 &amp;&amp;= 'b';\nconsole.log(x1) \u002F\u002F \"b\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cstrong\u003E\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FOperators\u002FLogical_OR_assignment\"\u003EОператор присваивания логического ИЛИ \u002F Logical or assignment\u003C\u002Fa\u003E (\u003Ccode\u003E||=\u003C\u002Fcode\u003E)\u003C\u002Fstrong\u003E: присваивает новое значение переменной только в том случае, когда текущим значением переменной является ложное значение:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Elet x1 = undefined;\nlet x2 = 'a';\nconst getNewValue = () =\u003E 'b';\n\nx1 ||= 'b';\nconsole.log(x1) \u002F\u002F \"b\"\n\nx2 ||= getNewValue();\nconsole.log(x1) \u002F\u002F \"a\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E__\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FWeakRef\"\u003E\u003Ccode\u003EWeakRef\u003C\u002Fcode\u003E\u003C\u002Fa\u003E__: содержит \"слабую\" ссылку на объект. Слабая ссылка не препятствует уничтожению объекта сборщиком мусора:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Econst ref = new WeakRef(element);\n\n\u002F\u002F Получаем значение, если объект\u002Fэлемент существует и не был уничтожен сборщиком мусора\nconst value = ref.deref;\nconsole.log(value); \u002F\u002F undefined\n\u002F\u002F Похоже, объекта больше нет\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E_\u003Cem\u003EРазделители числовых литералов \u002F Numeric literal separators (`\u003C\u002Fem\u003E`)__: позволяет разделять числа для повышения читаемости, не влияет на функционал:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Econst int = 1_000_000_000;\nconst float = 1_000_000_000.999_999_999;\nconst max = 9_223_372_036_854_775_807n;\nconst binary = 0b1011_0101_0101;\nconst octal = 0o1234_5670;\nconst hex = 0xD0_E0_F0;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Ch3 id=\"es2022\"\u003EES2022\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cstrong\u003E\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FOperators\u002Fawait\"\u003E\u003Ccode\u003Eawait\u003C\u002Fcode\u003E верхнего уровня \u002F Top level await\u003C\u002Fa\u003E\u003C\u002Fstrong\u003E: позволяет использовать ключевое слово \u003Ccode\u003Eawait\u003C\u002Fcode\u003E на верхнем уровне модулей, что избавляет от необходимости оборачивать асинхронный код в асинхронную функцию и улучшает обработку ошибок:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Easync function asyncFuncSuccess() {\n  return 'test';\n}\nasync function asyncFuncFail() {\n  throw new Error('Test');\n}\n\n\u002F\u002F Раньше:\n\u002F\u002F Ждать разрешения промиса можно было только внутри асинхронной функции\n\u002F\u002F await asyncFuncSuccess(); \u002F\u002F SyntaxError: await is only valid in async functions\n\u002F\u002F Обертка приводит к усложнению обработки ошибок и потере контроля за порядком выполнения кода\ntry {\n  (async () =\u003E {\n    console.log(await asyncFuncSuccess()); \u002F\u002F \"test\"\n    try {\n      await asyncFuncFail();\n    } catch (e) {\n      \u002F\u002F Иначе ошибки не будут перехвачены (или будут перехвачены слишком поздно с усложненной трассировкой стека)\n      console.error(e); \u002F\u002F Error: \"Test\"\n      throw e;\n    }\n  })();\n} catch (e) {\n  \u002F\u002F Не выполняется или выполняется слишком поздно\n  console.error(e);\n}\n\u002F\u002F Выводится до разрешения промиса\nconsole.log('Hey'); \u002F\u002F \"Hey\"\n\n\u002F\u002F Сейчас:\n\u002F\u002F Файл должен быть модулем (`\"type\"\" \"module\"` в `package.json` или расширение \".mjs\")\nconsole.log(await asyncFuncSuccess()); \u002F\u002F \"test\"\ntry {\n  await asyncFuncFail();\n} catch (e) {\n  console.error(e); \u002F\u002F Error: \"Test\"\n}\n\u002F\u002F Выводится после разрешения промиса\nconsole.log('Hello'); \u002F\u002F \"Hello\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cstrong\u003E\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FClasses\u002FPrivate_class_fields\"\u003E\u003Ccode\u003E#private\u003C\u002Fcode\u003E\u003C\u002Fa\u003E\u003C\u002Fstrong\u003E: делает членов класса (свойства и методы) приватными (закрытыми). Такие члены доступны только внутри класса, в котором они определены. Они не могут удаляться или определяться динамически. Любое некорректное поведение завершается синтаксической ошибкой JS. В TS-проектах для обозначения приватных членов класса используется ключевое слово \u003Ccode\u003Eprivate\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Eclass ClassWithPrivateField {\n  #privateField;\n  #anotherPrivateField = 4;\n\n  constructor() {\n    this.#privateField = 42; \u002F\u002F Ok\n    this.#privateField; \u002F\u002F SyntaxError\n    this.#undeclaredField = 444; \u002F\u002F SyntaxError\n    console.log(this.#anotherPrivateField); \u002F\u002F 4\n  }\n}\n\nconst instance = new ClassWithPrivateField();\ninstance.#privateField === 42; \u002F\u002F SyntaxError\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cstrong\u003E\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FClasses\u002Fstatic\"\u003EСтатические члены класса \u002F Static class members\u003C\u002Fa\u003E\u003C\u002Fstrong\u003E: делает поле класса (свойство или метод) статическим:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Eclass Logger {\n  static id = 'Logger1';\n  static type = 'GenericLogger';\n  static log(message: string | Error) {\n    console.log(message);\n  }\n}\n\nclass ErrorLogger extends Logger {\n  static type = 'ErrorLogger';\n  static qualifiedType;\n  static log(e: Error) {\n    return super.log(e.toString());\n  }\n}\n\nconsole.log(Logger.type); \u002F\u002F \"GenericLogger\"\nLogger.log('Test'); \u002F\u002F \"Test\"\n\n\u002F\u002F Инстанцирование класса, содержащего только статические поля, бесполезно и\n\u002F\u002F выполняется здесь только в целях демонстрации\nconst log = new Logger();\n\nErrorLogger.log(new Error('Test')); \u002F\u002F Error: \"Test\" (инстанцирование суперкласса не меняет поведение подклассов)\nconsole.log(ErrorLogger.type); \u002F\u002F \"ErrorLogger\"\nconsole.log(ErrorLogger.qualifiedType); \u002F\u002F undefined\nconsole.log(ErrorLogger.id); \u002F\u002F \"Logger1\"\n\n\u002F\u002F Выбрасывается исключение, поскольку `log` - статический метод, а не метод экземпляра\nconsole.log(log.log()); \u002F\u002F log.log is not a function\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cstrong\u003E\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FClasses\u002FStatic_initialization_blocks\"\u003EСтатические блоки инициализации \u002F Static initialization blocks\u003C\u002Fa\u003E\u003C\u002Fstrong\u003E: блок кода, который выполняется при инициализации класса. Как правило, такие блоки используются в качестве \"конструкторов\" статических членов классов:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Eclass Test {\n  static staticProperty1 = 'Property 1';\n  static staticProperty2;\n  static {\n    this.staticProperty2 = 'Property 2';\n  }\n}\n\nconsole.log(Test.staticProperty1); \u002F\u002F \"Property 1\"\nconsole.log(Test.staticProperty2); \u002F\u002F \"Property 2\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cstrong\u003EУтверждение импорта \u002F Import assertion (пока доступно только в V8)\u003C\u002Fstrong\u003E: определяет тип импортируемого ресурса. Может использоваться, например, для импорта JSON без необходимости его разбора:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Eimport json from '.\u002Ffoo.json' assert { type: 'json' };\nconsole.log(json.answer); \u002F\u002F 42\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Cstrong\u003EИндексы совпадений регулярного выражения \u002F RegExp match indices\u003C\u002Fstrong\u003E: начальный и конечный индексы совпадения регулярного выражения с группами захвата. Это работает с \u003Ccode\u003ERegExp.exec()\u003C\u002Fcode\u003E, \u003Ccode\u003ERegExp.match()\u003C\u002Fcode\u003E и \u003Ccode\u003EString.matchAll()\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Econst matchObj = \u002F(test+)(hello+)\u002Fd.exec('start-testesthello-stop');\n\n\u002F\u002F Раньше:\nconsole.log(matchObj?.index); \u002F\u002F 9 - только начальный индекс совпадения\n\n\u002F\u002F Сейчас:\nif (matchObj) {\n  \u002F\u002F Начальный и конечный индексы совпадения\n  console.log(matchObj.indices[0]); \u002F\u002F [9, 18]\n\n  \u002F\u002F Начальный и конечный индексы групп захвата\n  console.log(matchObj.indices[1]); \u002F\u002F [9, 13]\n  console.log(matchObj.indices[2]); \u002F\u002F [13, 18]\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E__\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FArray\u002Fat\"\u003EНегативная индексация \u002F Negative indexing\u003C\u002Fa\u003E__: метод \u003Ccode\u003EArray.at\u003C\u002Fcode\u003E возвращает элементы массива с конца (с помощью отрицательных индексов). \u003Ccode\u003Eat(-1)\u003C\u002Fcode\u003E является эквивалентом \u003Ccode\u003Earr[arr.length - 1]\u003C\u002Fcode\u003E для получения последнего элемента, но не для его установки:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Econsole.log([4, 5].at(-1)) \u002F\u002F 5\n\nconst array = [4, 5];\narray.at(-1) = 3; \u002F\u002F SyntaxError\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E__\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FObject\u002FhasOwn\"\u003E\u003Ccode\u003EObject.hasOwn()\u003C\u002Fcode\u003E\u003C\u002Fa\u003E__: альтернатива метода \u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FObject\u002FhasOwnProperty\"\u003E\u003Ccode\u003EObject.hasOwnProperty()\u003C\u002Fcode\u003E\u003C\u002Fa\u003E, позволяющая определять наличие в объекте указанного свойства. Работает лучше в некоторых крайних случаях:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Econst obj = { name: 'test' };\n\nconsole.log(Object.hasOwn(obj, 'name')); \u002F\u002F true\nconsole.log(Object.hasOwn(obj, 'gender')); \u002F\u002F false\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E__\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FError\u002Fcause\"\u003EПричина ошибки \u002F Error cause\u003C\u002Fa\u003E__: при повторном выбросе исключения (re-throwing) в качестве второго аргумента в конструктор \u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FError\u002FError\"\u003E\u003Ccode\u003EError\u003C\u002Fcode\u003E\u003C\u002Fa\u003E можно передать объект со свойством \u003Ccode\u003Ecause\u003C\u002Fcode\u003E, значением которого является оригинальное исключение:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Etry {\n  try {\n    connectToDatabase();\n  } catch (err) {\n    throw new Error('Не удалось подключиться к базе данных.', { cause: err });\n  }\n} catch (err) {\n  console.log(err.cause); \u002F\u002F ReferenceError: connectToDatabase is not defined\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EНа этом перевод первой части, посвященной возможностям JS, завершен. В следующей части мы поговорим о возможностях TS.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EНадеюсь, вы узнали что-то новое и не зря потратили время.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003EHappy coding!\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\r\n\u003Chr\u002F\u003E\u003Cbr\u002F\u003E\r\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Ftimeweb.cloud\u002Fvds-vps?utm_source=habr&amp;utm_medium=banner&amp;utm_campaign\"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fwebt\u002Fmx\u002Fua\u002Fnb\u002Fmxuanbovcusqgmqdgugvpnql8vq.jpeg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fmx\u002Fua\u002Fnb\u002Fmxuanbovcusqgmqdgugvpnql8vq.jpeg\" data-blurred=\"true\"\u002F\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E","tags":[{"titleHtml":"timeweb_статьи_перевод"},{"titleHtml":"javascript"},{"titleHtml":"typescript"},{"titleHtml":"ts"},{"titleHtml":"feature"},{"titleHtml":"возможность"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fma\u002Fpo\u002Flv\u002Fmapolvqq4uunxfqoaviv3g9km9y.jpeg","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fma\u002Fpo\u002Flv\u002Fmapolvqq4uunxfqoaviv3g9km9y.jpeg","schemaJsonLd":"{\"@context\":\"http:\\\u002F\\\u002Fschema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fcompany\\\u002Ftimeweb\\\u002Fblog\\\u002F722450\\\u002F\"},\"headline\":\"Возможности JavaScript и TypeScript последних лет. Часть 1\",\"datePublished\":\"2023-03-15T17:01:03+03:00\",\"dateModified\":\"2023-03-15T18:02:32+03:00\",\"author\":{\"@type\":\"Person\",\"name\":\"Igor Agapov\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fa_\\\u002Flk\\\u002F9m\\\u002Fa_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Hello, world! Представляю вашему вниманию перевод первой части этой замечательной статьи, посвященной возможностям JS и TS последних трех лет, которые вы могли...\",\"url\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fcompany\\\u002Ftimeweb\\\u002Fblog\\\u002F722450\\\u002F#post-content-body\",\"about\":[\"c_timeweb\",\"h_webdev\",\"h_javascript\",\"h_typescript\",\"f_develop\"],\"image\":[\"https:\\\u002F\\\u002Fhabr.com\\\u002Fshare\\\u002Fpublication\\\u002F722450\\\u002Fbd425968d37833a029d7c46eb7f7ac37\\\u002F\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fma\\\u002Fpo\\\u002Flv\\\u002Fmapolvqq4uunxfqoaviv3g9km9y.jpeg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fmx\\\u002Fua\\\u002Fnb\\\u002Fmxuanbovcusqgmqdgugvpnql8vq.jpeg\"]}","metaDescription":"Hello, world! Представляю вашему вниманию перевод первой части этой замечательной статьи , посвященной возможностям JS и TS последних трех лет, которые вы могли пропустить. В первой части мы...","mainImageUrl":null,"amp":false,"customTrackerLinks":[]},"polls":[],"commentsEnabled":true,"rulesRemindEnabled":false,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"hasPinnedComments":false,"format":"review","readingTime":13,"complexity":"medium","isEditorial":false}},"articlesIds":{},"isLoading":false,"pagesCount":{},"route":{},"reasonsList":null,"view":"list","lastVisitedRoute":{},"ssrCommentsArticleIds":[""],"karma":{"userReasonsList":null}},"authorContribution":{"authors":{}},"betaTest":{"currentAnnouncement":null,"announcements":{},"announcementCards":null,"announcementComments":{},"announcementCommentThreads":{},"announcementCommentingStatuses":{},"archivedList":[]},"authorStatistics":{"articleRefs":{},"articleIds":{},"pagesCount":{},"route":{},"viewsCount":[],"maxStatsCount":{}},"career":{"seoLandings":[],"hubs":""},"comments":{"articleComments":{},"articlePinnedComments":{},"searchCommentsResults":null,"pagesCount":null,"commentAccess":{},"scrollParents":{},"pageArticleComments":{"lastViewedComment":0,"postId":null,"lastCommentTimestamp":"","moderated":[],"moderatedIds":[],"commentRoute":""}},"companies":{"companyRefs":{"timeweb":{"alias":"timeweb","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002Ffc0\u002F4f0\u002F3f7\u002Ffc04f03f7188eca615ef971283d62dc5.png","titleHtml":"Timeweb Cloud","descriptionHtml":"Облачная платформа для разработчиков и бизнеса","relatedData":null,"statistics":{"subscribersCount":1136,"rating":1605.48,"invest":null,"postsCount":831,"newsCount":40,"vacanciesCount":0,"employeesCount":34,"careerRating":null},"foundationDate":{"year":"2006","month":"05","day":"25"},"location":{"city":{"id":"447733","title":"Санкт-Петербург"},"region":{"id":"1948","title":"Санкт-Петербург и область"},"country":{"id":"168","title":"Россия"}},"siteUrl":"https:\u002F\u002Ftimeweb.cloud\u002F","staffNumber":"201–500 человек","registrationDate":"2011-08-11T14:17:04+00:00","representativeUser":null,"contacts":[],"settings":{"analyticsSettings":[{"type":"ga","trackingId":"UA-52903813-5"}],"branding":null,"status":"active","isStartup":false,"hasActivePolls":false},"metadata":{"titleHtml":"Timeweb Cloud, Санкт-Петербург - Облачная платформа для разработчиков и бизнеса с 25 мая 2006 г.","title":"Timeweb Cloud, Санкт-Петербург - Облачная платформа для разработчиков и бизнеса с 25 мая 2006 г.","keywords":["Читальный зал","Научно-популярное","JavaScript","DIY или Сделай сам","История IT","timeweb_статьи","javascript","timeweb","программирование","timeweb_статьи_выходного_дня","react","timeweb_статьи_перевод","arduino","микроконтроллеры","история","iot","react.js","история it","reactjs","typescript","игры","timeweb_новости","linux","автоматизация","ссср"],"descriptionHtml":"831 статья от авторов компании Timeweb Cloud","description":"831 статья от авторов компании Timeweb Cloud"},"aDeskSettings":null,"careerAlias":"hrtimewebru"}},"companyIds":{},"companyTopIds":{},"pagesCount":{},"companyProfiles":{},"companiesCategories":[],"companiesCategoriesTotalCount":0,"companiesWidgets":{},"companiesWorkers":{},"companiesFans":{},"route":{},"isLoading":false,"companyWorkersLoading":false,"companyFansLoading":false,"vacancies":{},"companiesGalleries":{},"companiesBanners":{},"companiesLandingVacancies":{},"companiesTechnologies":{},"workplaceInfo":null},"companyAdmin":{"companyInfo":null,"companyInfoLoading":false,"faqArticles":null,"brandingPreviewImageUrl":null,"jivoStatus":0,"adminNotifications":null},"companiesContribution":{"hubs":{},"flows":{},"companyRefs":{}},"companyHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"conversation":{"messages":[],"respondent":null,"isLoadMore":false},"conversations":{"conversations":[],"unreadCount":0,"pagesCount":0},"desktopState":{"desktopFl":null,"desktopHl":null,"isChecked":false,"isLoginDemanded":false},"docs":{"menu":{},"articles":{},"mainMenu":[],"loading":{"main":false,"dropdown":false,"article":false}},"feature":{"isProbablyVisible":true},"flows":{"updates":{"countNewPostsBySubscription":null,"countNewPostsAll":67,"countNewNewsAll":54},"flows":[{"alias":"develop","id":"1","route":{"name":"FLOW_PAGE","params":{"flowName":"develop"}}},{"alias":"admin","id":"6","route":{"name":"FLOW_PAGE","params":{"flowName":"admin"}}},{"alias":"design","id":"2","route":{"name":"FLOW_PAGE","params":{"flowName":"design"}}},{"alias":"management","id":"3","route":{"name":"FLOW_PAGE","params":{"flowName":"management"}}},{"alias":"marketing","id":"4","route":{"name":"FLOW_PAGE","params":{"flowName":"marketing"}}},{"alias":"popsci","id":"7","route":{"name":"FLOW_PAGE","params":{"flowName":"popsci"}}}]},"global":{"isPwa":false,"device":"mobile","isHabrCom":true},"hubs":{"hubRefs":{},"hubIds":{},"pagesCount":{},"isLoading":false,"route":{}},"hubsBlock":{"hubRefs":{},"hubIds":{}},"i18n":{"fl":"ru","hl":"ru"},"info":{"infoPage":{},"isLoading":true},"location":{"urlStruct":{"protocol":null,"slashes":null,"auth":null,"host":null,"port":null,"hostname":null,"hash":null,"search":null,"query":{},"pathname":null,"path":null,"href":""}},"me":{"user":null,"uuid":null,"ppgDemanded":false,"karmaResetInfo":{"canReincarnate":null,"wasReincarnated":null,"currentScore":null},"notes":null},"modal":{"modals":[]},"mostReadingList":{"mostReadingListIds":[],"mostReadingListRefs":null,"promoPost":null},"ppa":{"articles":{},"card":null,"transactions":null,"totalTransactions":null,"isAccessible":null},"projectsBlocks":{"activeBlocks":{}},"promoData":{"isLoading":false,"hasLoaded":false,"featurer":null,"megaposts":null,"promoLinks":null,"promoPosts":null},"pullRefresh":{"shouldRefresh":false},"sandbox":{"articleIds":[],"articleRefs":{},"pagesCount":null,"route":{},"lastVisitedRoute":{},"isLoading":false},"search":{"searchQueryError":null},"settingsOther":{"inputs":{"uiLang":{"errors":[],"ref":null,"value":""},"articlesLangEnglish":{"errors":[],"ref":null,"value":false},"articlesLangRussian":{"errors":[],"ref":null,"value":false},"agreement":{"errors":[],"ref":null,"value":false},"email":{"errors":[],"ref":null,"value":true},"digest":{"errors":[],"ref":null,"value":true}}},"similarList":{"similarListIds":[],"similarListRefs":null},"ssr":{"error":null,"isDataLoaded":false,"isDataLoading":false,"isHydrationFailed":false,"isServer":false},"stories":{"stories":[{"id":"story-302","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffa0\u002F939\u002F5d1\u002Ffa09395d14e24eccbc732d3224b88c35.png","title":"Хабр Карьера","link":"https:\u002F\u002Fu.habr.com\u002FiBejh"},"title":"Техническое собеседование тестировщика","lang":"ru","startTime":"2023-03-15T17:25:00+03:00","finishTime":"2023-03-22T17:18:24+03:00","slides":[{"id":"story-302_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd3a\u002F834\u002F476\u002Fd3a834476c7f0ef78c446688b40bcf92.png","button":null},{"id":"story-302_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F37d\u002F2cd\u002F716\u002F37d2cd716ea3bcf76205f7b0e53cbfce.png","button":null},{"id":"story-302_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb1b\u002Fe49\u002Fbca\u002Fb1be49bca3163216af7498c51df10d57.png","button":{"title":"Смотреть","link":"https:\u002F\u002Fu.habr.com\u002FiBejh","colorType":"dark"}}]},{"id":"story-300","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F733\u002Ff4f\u002Fcfb\u002F733f4fcfb4ea40096d8b3b233eeabed7.png","title":"Хабр Новости","link":"https:\u002F\u002Fu.habr.com\u002FDaBkU"},"title":"Tesla Bot в Atomic Heart","lang":"ru","startTime":"2023-03-15T14:00:00+03:00","finishTime":"2023-03-17T23:59:00+03:00","slides":[{"id":"story-300_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F92b\u002F5db\u002Fa88\u002F92b5dba8866be4b38399b6c27b1c8f66.jpg","button":null},{"id":"story-300_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1af\u002F4b9\u002F1fb\u002F1af4b91fba77623e6042130d7acc081b.jpg","button":null},{"id":"story-300_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F427\u002F695\u002F8f5\u002F4276958f56d2451cf11d1a0f3ed3c4a8.jpg","button":{"title":"Подробнее","link":"https:\u002F\u002Fu.habr.com\u002FDaBkU","colorType":"light"}}]},{"id":"story-298","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F861\u002F278\u002F7b0\u002F8612787b0e2137d8cf487ce655a8bc60.png","title":"Хабр Новости","link":"https:\u002F\u002Fu.habr.com\u002FR9kas"},"title":"Робопсы патрулируют ЦОД в Цюрихе","lang":"ru","startTime":"2023-03-15T13:52:00+03:00","finishTime":"2023-03-17T22:30:00+03:00","slides":[{"id":"story-298_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F86c\u002F3e9\u002Fb24\u002F86c3e9b2404091d1675b4e82fbc670c2.jpg","button":null},{"id":"story-298_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F338\u002F37a\u002Ff4e\u002F33837af4e14c4502f1262273cff0be0b.jpg","button":null},{"id":"story-298_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffad\u002F29f\u002F78b\u002Ffad29f78bc03ca9d473d2da93629fa5f.jpg","button":{"title":"Подробнее","link":"https:\u002F\u002Fu.habr.com\u002FR9kas","colorType":"light"}}]},{"id":"story-296","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd59\u002Fa4b\u002Fc74\u002Fd59a4bc74deec559888728bac63c8744.png","title":"Хабр Карьера","link":"https:\u002F\u002Fu.habr.com\u002FfnoO9"},"title":"Кем работать в IT: Scrum-мастер","lang":"ru","startTime":"2023-03-14T11:10:00+03:00","finishTime":"2023-03-21T23:59:00+03:00","slides":[{"id":"story-296_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F50c\u002Ff4e\u002Fb0b\u002F50cf4eb0b63bacf94fe49737d0e00958.png","button":null},{"id":"story-296_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F4cf\u002F981\u002Fb95\u002F4cf981b95ef9afeb773d191612ddfec3.png","button":null},{"id":"story-296_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3ab\u002Fe79\u002F5da\u002F3abe795da78dcd4c1f951a7eb6481608.png","button":{"title":"Подробнее","link":"https:\u002F\u002Fu.habr.com\u002FfnoO9","colorType":"dark"}},{"id":"story-296_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F72f\u002Fe3e\u002F46f\u002F72fe3e46faaf60ec518100b155b61d73.png","button":{"title":"Подробнее","link":"https:\u002F\u002Fu.habr.com\u002FfnoO9","colorType":"dark"}},{"id":"story-296_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F471\u002F060\u002F9a1\u002F4710609a1dfa6a508fef8ec62f031621.png","button":{"title":"Подробнее","link":"https:\u002F\u002Fu.habr.com\u002FfnoO9","colorType":"dark"}},{"id":"story-296_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F67f\u002F49b\u002F88c\u002F67f49b88c5e399b4d75c560288b72796.png","button":{"title":"Подробнее","link":"https:\u002F\u002Fu.habr.com\u002FfnoO9","colorType":"dark"}}]},{"id":"story-280","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8f3\u002Ff89\u002Faa5\u002F8f3f89aa500a5fc407f7e1e927002ce0.png","title":"Geek Travel","link":null},"title":"Где в России покататься на дрезине","lang":"ru","startTime":"2023-03-09T10:00:00+03:00","finishTime":"2023-03-19T23:59:00+03:00","slides":[{"id":"story-280_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb44\u002F68b\u002Fd51\u002Fb4468bd51494723807a4438f03a9824d.jpg","button":null},{"id":"story-280_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3aa\u002Fafe\u002F0fb\u002F3aaafe0fb803c0043aff70ae407a6da0.jpg","button":null},{"id":"story-280_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fca6\u002F8ed\u002F3d8\u002Fca68ed3d8251f5e25034d27c4e73da3a.jpg","button":null},{"id":"story-280_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff02\u002Ff05\u002Fafd\u002Ff02f05afda6f5925e4aaa3748953575c.jpg","button":null},{"id":"story-280_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fca9\u002Fa6a\u002Fad2\u002Fca9a6aad2113a292566924b015a44d88.jpg","button":null},{"id":"story-280_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F4f8\u002F708\u002Faa9\u002F4f8708aa9526b05dd8bc0e23dbbb59d7.jpg","button":null},{"id":"story-280_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2af\u002F9d2\u002F852\u002F2af9d2852a460d69364e0969cbb7d04f.jpg","button":null}]},{"id":"story-288","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F81b\u002F4f7\u002F1e8\u002F81b4f71e8fdc766f6d91491a5179ecb0.png","title":"Хабр Карьера","link":"https:\u002F\u002Fhabr.com\u002Fru\u002Fusers\u002Fhabr_career\u002Fposts\u002F"},"title":"Разбор резюме специалистов на Хабр Карьере","lang":"ru","startTime":"2023-03-08T13:00:00+03:00","finishTime":"2023-03-15T23:59:00+03:00","slides":[{"id":"story-288_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F85a\u002F0ec\u002Fde0\u002F85a0ecde038a35f01ff328a3e67f5450.png","button":null},{"id":"story-288_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F885\u002F078\u002F3e1\u002F8850783e127c042f4db7a31cbe43c561.png","button":null},{"id":"story-288_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F876\u002F34c\u002F5b8\u002F87634c5b855ea18469a3024e386bb160.png","button":{"title":"Смотреть разбор","link":"https:\u002F\u002Fu.habr.com\u002FyDfoT","colorType":"dark"}}]},{"id":"story-278","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3b2\u002F2b9\u002F874\u002F3b22b9874c30d2e95f06e8ba591d7226.png","title":"Хабр","link":"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fhabr\u002Fblog\u002F"},"title":"Схватил за мозг","lang":"ru","startTime":"2023-03-06T11:00:00+03:00","finishTime":"2023-03-19T23:59:00+03:00","slides":[{"id":"story-278_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F6d2\u002F515\u002F649\u002F6d2515649a98ebff0fff2c95f13aa9e6.jpg","button":null},{"id":"story-278_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F6ba\u002F37c\u002F756\u002F6ba37c75671941bb212e0bf815f99550.jpg","button":{"title":"Что оказалось?","link":"https:\u002F\u002Fu.habr.com\u002Fbrain01","colorType":"light"}},{"id":"story-278_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F702\u002Fbe8\u002Fa8f\u002F702be8a8fe21d483936df54dc074b96a.jpg","button":{"title":"Осознать","link":"https:\u002F\u002Fu.habr.com\u002Fbrain02","colorType":"light"}},{"id":"story-278_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F9e2\u002F2c2\u002F499\u002F9e22c2499018c37dbb4064053ef7e0a0.jpg","button":{"title":"Отложить таблетку","link":"https:\u002F\u002Fu.habr.com\u002Fbrain03","colorType":"dark"}},{"id":"story-278_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F756\u002F85f\u002F99b\u002F75685f99b00f7a2323028948818a1b66.jpg","button":{"title":"Смотреть советы","link":"https:\u002F\u002Fu.habr.com\u002Fbrain04","colorType":"dark"}},{"id":"story-278_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F442\u002F9a8\u002F159\u002F4429a8159a4280575a30cf1bbbdb3b08.jpg","button":{"title":"Уделить внимание","link":"https:\u002F\u002Fu.habr.com\u002Fbrain05","colorType":"light"}},{"id":"story-278_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F892\u002Fe3e\u002Fa8b\u002F892e3ea8b4ad8934c6858348943804fd.jpg","button":{"title":"Записать нужное","link":"https:\u002F\u002Fu.habr.com\u002Fbrain06","colorType":"light"}},{"id":"story-278_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffa5\u002Ffe9\u002F7bb\u002Ffa5fe97bb1ec4af1e7b1e164171b795c.jpg","button":{"title":"Какое именно?","link":"https:\u002F\u002Fu.habr.com\u002Fbrain07","colorType":"light"}}]},{"id":"story-276","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F371\u002F16e\u002F9ae\u002F37116e9aec24a99308b5d55fd3385062.png","title":"Хабр","link":"https:\u002F\u002Fu.habr.com\u002Fstories_habrapp"},"title":"Приложение Хабра для Android и iOS","lang":"ru","startTime":"2023-03-06T10:00:00+03:00","finishTime":"2023-03-19T23:59:00+03:00","slides":[{"id":"story-276_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F5d5\u002Fadb\u002F1dd\u002F5d5adb1dd2abf6a2e7f8956f4879eced.jpg","button":{"title":"Вот это новость!","link":"https:\u002F\u002Fu.habr.com\u002Fstories_habrapp","colorType":"light"}},{"id":"story-276_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2e1\u002Fd75\u002F99c\u002F2e1d7599c38e3c11d124d5e8beece6cc.jpg","button":{"title":"А что у вас за стек?","link":"https:\u002F\u002Fu.habr.com\u002Fstories_habrapp","colorType":"dark"}},{"id":"story-276_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F448\u002Fe83\u002F1f9\u002F448e831f9da9256729dff47718aefdab.jpg","button":{"title":"Перейти к приложению","link":"https:\u002F\u002Fu.habr.com\u002FK8Ib8","colorType":"light"}},{"id":"story-276_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Faa0\u002F395\u002F080\u002Faa0395080db2f6eebbc22620a3153c1c.jpg","button":{"title":"Перейти к приложению","link":"https:\u002F\u002Fu.habr.com\u002FFatyV","colorType":"dark"}}]},{"id":"story-272","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F82b\u002Fdd7\u002F7d8\u002F82bdd77d8ef7304d3b1b599191c2bb1c.png","title":"Сезоны Хабра","link":"https:\u002F\u002Fu.habr.com\u002F5P6i7"},"title":"Открыт сезон ML","lang":"ru","startTime":"2023-03-02T09:00:41+03:00","finishTime":"2023-03-31T20:53:00+03:00","slides":[{"id":"story-272_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F27f\u002Fd3a\u002Fddf\u002F27fd3addfe06da09592bdcf61db15795.jpg","button":null},{"id":"story-272_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F935\u002F582\u002F992\u002F935582992e378add33c898451b2a0d9f.jpg","button":null},{"id":"story-272_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe13\u002Feb8\u002Fa24\u002Fe13eb8a24b60622d3da72fd6e7ed3fda.jpg","button":null},{"id":"story-272_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fa85\u002F83f\u002F5cc\u002Fa8583f5ccfae747135343f0e68c84112.jpg","button":{"title":"Подробнее","link":"https:\u002F\u002Fu.habr.com\u002F5P6i7","colorType":"light"}},{"id":"story-272_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F60d\u002F1cb\u002F98c\u002F60d1cb98cdd42d2696ebc0ec54740a23.jpg","button":{"title":"Подробнее","link":"https:\u002F\u002Fu.habr.com\u002F5P6i7","colorType":"light"}}]},{"id":"story-262","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2fa\u002Fc8a\u002Fba8\u002F2fac8aba82b995297abea595da7990d1.png","title":"Хабр","link":"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fhabr\u002Fblog\u002F"},"title":"Наука сна","lang":"ru","startTime":"2023-02-28T12:15:00+03:00","finishTime":"2023-03-15T23:59:00+03:00","slides":[{"id":"story-262_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fa90\u002F725\u002F61c\u002Fa9072561c280c46933ff54fd8702cade.jpg","button":null},{"id":"story-262_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffd7\u002F658\u002F956\u002Ffd7658956ea825b1c317c7f688c48058.jpg","button":{"title":"Читать лекцию","link":"https:\u002F\u002Fu.habr.com\u002Fson01","colorType":"light"}},{"id":"story-262_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F366\u002Fd2e\u002F707\u002F366d2e70725209177fa82a4119139c86.jpg","button":{"title":"При чём же?","link":"https:\u002F\u002Fu.habr.com\u002Fson02","colorType":"light"}},{"id":"story-262_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F4bd\u002F40f\u002F731\u002F4bd40f731bfbf571a709dd2f357f06b4.jpg","button":{"title":"Заглянуть в дневник","link":"https:\u002F\u002Fu.habr.com\u002Fson03","colorType":"light"}},{"id":"story-262_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F944\u002F7ad\u002Fe2f\u002F9447ade2f38c3c36790be75bf4462047.jpg","button":{"title":"Последствия","link":"https:\u002F\u002Fu.habr.com\u002Fson04","colorType":"light"}},{"id":"story-262_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F74c\u002Fce1\u002F4dc\u002F74cce14dc903b245dca90df3f2747abb.jpg","button":{"title":"Смотреть список","link":"https:\u002F\u002Fu.habr.com\u002Fson05","colorType":"light"}},{"id":"story-262_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbc9\u002Fa62\u002F9f0\u002Fbc9a629f0c5ef2027cf7796749a06914.jpg","button":{"title":"Следы в истории","link":"https:\u002F\u002Fu.habr.com\u002Fson06","colorType":"light"}},{"id":"story-262_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F085\u002F0ee\u002F868\u002F0850ee868132e1ec4ec3b24caf7e719a.jpg","button":{"title":"Что придумали?","link":"https:\u002F\u002Fu.habr.com\u002Fson07","colorType":"light"}}]},{"id":"story-152","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fa49\u002F0d3\u002F609\u002Fa490d3609f29b6dfc53a7b88ab47ca64.png","title":"Хабр","link":"https:\u002F\u002Fu.habr.com\u002Fstory_HiM-anketa"},"title":"Сеньоры — очень странные люди","lang":"ru","startTime":"2023-01-23T11:00:00+03:00","finishTime":"2023-03-31T23:59:00+03:00","slides":[{"id":"story-152_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbbb\u002F901\u002F063\u002Fbbb9010630ae483ed1f41ec4e2572c13.png","button":null},{"id":"story-152_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F4f8\u002F66c\u002F14f\u002F4f866c14f0ca8999334438d7f17c0e3a.png","button":null},{"id":"story-152_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F6b9\u002Fa07\u002Fa61\u002F6b9a07a612df213ac3a1c179301828df.png","button":null},{"id":"story-152_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff6b\u002Fadb\u002Fb99\u002Ff6badbb9969d7e34ef4f7492767c6a77.png","button":null},{"id":"story-152_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd9c\u002F9ac\u002F878\u002Fd9c9ac878bec5b494699e0080dd2e813.png","button":null},{"id":"story-152_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fdb1\u002Faf9\u002Fc3b\u002Fdb1af9c3bb557f6cee698cf67610f977.png","button":null},{"id":"story-152_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F5cf\u002Fbed\u002F65b\u002F5cfbed65bd20b7051b1aac2b9d6e807e.png","button":null},{"id":"story-152_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffa8\u002F251\u002F4a9\u002Ffa82514a9471cd455339e97178d8c021.png","button":null},{"id":"story-152_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbd5\u002F901\u002Fe95\u002Fbd5901e952d9cf638355a3cc8b0c0911.png","button":{"title":"Хочу помочь джуну","link":"https:\u002F\u002Fu.habr.com\u002Fstory_HiM-anketa","colorType":"light"}}]}]},"technotext":{"years":[],"technotextDocForNominees":null,"technotextDocForWinners":null,"technotextInfo":{},"technotextInfoLoading":false,"technotextWinners":{},"technotextWinnersLoading":false},"userHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"userInvites":{"availableInvites":0,"usedInvitesIds":[],"usedInvitesRefs":{},"usedInvitesPagesCount":0,"unusedInvitesIds":[],"unusedInvitesRefs":{},"unusedInvitesPagesCount":0},"userVotes":{"karmaVotesList":[],"karmaVotesPagesCount":null,"karmaVotesListLoading":false,"commentsVotesList":[],"commentsVotesPagesCount":null,"commentsVotesListLoading":false,"postsVotesList":[],"postsVotesPagesCount":null,"postsVotesListLoading":false,"userVotesList":[],"userVotesPagesCount":null,"userVotesListLoading":false},"users":{"authorRefs":{},"authorIds":{},"pagesCount":{},"authorProfiles":{},"userHubs":{},"userInvitations":{},"authorFollowers":{},"authorFollowed":{},"userSpecialization":{},"karmaStats":[],"statistics":null,"isLoading":false,"authorFollowersLoading":false,"authorFollowedLoading":false,"userHubsLoading":false,"userInvitationsLoading":false,"route":{}},"viewport":{"prevScrollY":{},"scrollY":0,"width":0},"tracker":{"items":{},"pagesCache":{},"markedViewedSilently":{},"markedRead":{},"unreadCounters":{"applications":null,"system":null,"mentions":null,"subscribers":null,"posts_and_comments":null},"unviewedCounters":{"applications":null,"system":null,"mentions":null,"subscribers":null,"posts_and_comments":null}}};(function(){var s;(s=document.currentScript||document.scripts[document.scripts.length-1]).parentNode.removeChild(s);}());</script>
<script src="https://assets.habr.com/habr-web/js/chunk-vendors.76685433.js" defer></script><script src="https://assets.habr.com/habr-web/js/7298.c8f1d73c.js" defer></script><script src="https://assets.habr.com/habr-web/js/app.067cb56a.js" defer></script>



    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-726094-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
    </script>
  
  <script type="text/javascript" >
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

    ym(24049213, "init", {
      defer:true,
      trackLinks:true,
      accurateTrackBounce:true,
      webvisor:false,
    });
  </script>
  <noscript>
    <div>
      <img src="https://mc.yandex.ru/watch/24049213" style="position:absolute; left:-9999px;" alt="" />
    </div>
  </noscript>
  
    <script type="text/javascript">
      window.addEventListener('load', function () {
        setTimeout(() => {
          const img = new Image();
          img.src = 'https://vk.com/rtrg?p=VK-RTRG-421343-57vKE';
        }, 0);
      });
    </script>
  
<script src="/js/ads.js" onload="window['zhY4i4nJ9K'] = true"></script>
</body>
</html>

